#!/usr/bin/env oo-ruby
#--
# Copyright 2010 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#++

def usage
  puts <<USAGE
== Synopsis

#{$0}: Adds a set of user environment variables to the app.
  This command must be run as root.

== Usage

#{$0}  --with-app-uuid APP_UUID \\
                --with-container-uuid UUID \\
                [--with-gears GEAR_DNS;GEAR_DNS]
                "KEY0=VALUE0" "KEY1=VALUE1"

Options:
-h|--help:
   Prints this message

UUID: Unique identifier for the application
GEAR_DNS: secondary gears to be updated after adding user variables
KEY VALUE pairs

USAGE
  exit 1
end

require 'rubygems'
require 'openshift-origin-node'
require 'openshift-origin-node/utils/shell_exec'

opts = GetoptLong.new(
    ['--with-app-uuid', '-a', GetoptLong::REQUIRED_ARGUMENT],
    ['--with-container-uuid', '-c', GetoptLong::REQUIRED_ARGUMENT],
    ['--with-gears', '-g', GetoptLong::OPTIONAL_ARGUMENT],
)

container_uuid, app_uuid, gears = '', '', []
begin
  opts.each do |opt, arg|
    case opt
      when '--with-app-uuid'
        app_uuid = arg
      when '--with-container-uuid'
        container_uuid = arg
      when '--with-gears'
        gears = arg.split(';')
      when '--help'
        usage
    end
  end
rescue GetoptLong::Error => e
  usage
end

variables = {}
ARGV.each { |a| token = a.split('='); variables[token.first] = token.last }

if container_uuid.empty? or app_uuid.empty? or variables.empty?
  usage
end

begin
  container = OpenShift::Runtime::ApplicationContainer.from_uuid(container_uuid)
  rc, msg   = container.user_var_add(variables, gears)
  if rc == 0
    $stdout.puts msg
  else
    $stderr.puts msg
  end
rescue OpenShift::Runtime::Utils::ShellExecutionException => e
  $stderr.puts("#{e.message}\n#{e.stderr}")
  exit -1
rescue Exception => e
  $stderr.puts(e.message)
  exit -1
else
  exit 0
end
