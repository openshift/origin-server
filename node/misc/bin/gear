#!/usr/bin/env oo-ruby
#--
# Copyright 2013 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#++

require 'pp'
require 'rubygems'
require 'json'
require 'openshift-origin-node/model/application_container'
require 'openshift-origin-node/model/application_repository'
require 'openshift-origin-node/utils/node_logger'

require 'commander/import'

name="#{__FILE__}"

program :name, "OpenShift Gear Control"
program :version, "1.0.0"
program :description, "An assortment of gear utilities"

# Don't buffer output to the client
STDOUT.sync = true
STDERR.sync = true

HOT_DEPLOY_MARKER = File.join(%w(.openshift markers hot_deploy))
FORCE_CLEAN_BUILD_MARKER = File.join(%w(.openshift markers force_clean_build))
RESULT_SUCCESS = 'success'
RESULT_FAILURE = 'failure'

OpenShift::Runtime::NodeLogger.disable

def gear_cartridge_names
  cartridge_names = []
  @container.cartridge_model.each_cartridge do |c|
    cartridge_names << "#{c.name}-#{c.version}"
  end
  cartridge_names
end

##
# Walks through the commits between +old_rev+ and +new_rev+ in reverse chrono order,
# returning the latest detected status for the given +filename+. Status will be one
# of the values returned by Git's +diff-filter+ option, or +nil+ if +filename+ does
# not appear in the commits list.
def latest_status(old_rev, new_rev, filename)
  latest = nil

  Dir.chdir(@repo.path) do
    commits = `git rev-list #{old_rev}..#{new_rev}`.split("\n")
    commits.each do |commit|
      # extract an array [status, filename] from the commit
      object = `git show --pretty="format:" --name-status --diff-filter=[AD] #{commit} -- #{filename}`.chomp.strip.split("\t")

      if object.length > 0
        latest = object[0]
        break
      end
    end
  end

  latest
end

##
# Returns +true+ if the given +filename+ is committed to the $OPENSHIFT_DEPLOYMENT_BRANCH (or master if not specified)
# branch of the repository, otherwise +false+.
def file_committed?(filename)
  Dir.chdir(@repo.path) do
    return (not `git ls-tree #{ENV['OPENSHIFT_DEPLOYMENT_BRANCH'] || 'master'} -- #{filename}`.chomp.strip.empty?)
  end
end

@container = OpenShift::Runtime::ApplicationContainer.new(ENV['OPENSHIFT_APP_UUID'], ENV['OPENSHIFT_GEAR_UUID'], Etc.getpwuid.uid, ENV['OPENSHIFT_APP_NAME'], ENV['OPENSHIFT_GEAR_NAME'], ENV['OPENSHIFT_NAMESPACE'])
@repo = OpenShift::Runtime::ApplicationRepository.new(@container)

def do_command(command, options)
  begin
    yield
  rescue SystemExit, Interrupt
    puts
    exit 1
    rescue OpenShift::Runtime::Utils::ShellExecutionException => e
      $stderr.puts "An error occurred executing 'gear #{command.name}' (exit code: #{e.rc})"
      $stderr.puts "Error message: #{e.message}" if e.message.is_a? String
      $stderr.puts "stdout: #{e.stdout}" if e.stdout.is_a? String
      $stderr.puts "stderr: #{e.stderr}" if e.stderr.is_a? String
      $stderr.puts ""
      if options.trace
        $stderr.puts e.backtrace.join("\n")
      else
        $stderr.puts "For more details about the problem, try running the command again with the '--trace' option."
      end
      exit -1
  rescue Exception => e
    $stderr.puts e.message
    exit -1
  else
    exit 0
  end
end

global_option('--trace', 'Enable stack traces when reporting errors')

command :prereceive do |c|
  c.syntax = "#{name} prereceive"

  c.description = "Run the git prereceive steps"
  c.action do |args, options|
    do_command(c, options) do
      if ENV['OPENSHIFT_DEPLOYMENT_TYPE'] == 'binary'
        puts "OPENSHIFT_DEPLOYMENT_TYPE is 'binary' - git-based deployments are disabled."
      else
        marker_added     = false
        marker_deleted   = false
        marker_committed = file_committed?(HOT_DEPLOY_MARKER)

        # determine the branch to deploy, in order of priority:
        # - if $OPENSHIFT_DEPLOYMENT_BRANCH is set, use that
        # - fallback to master
        branch_to_deploy = ENV['OPENSHIFT_DEPLOYMENT_BRANCH'] || 'master'
        found_deployment_branch = false

        $stdin.each_line do |str|
          arr  = str.split
          refs = arr[2].split('/')

          old_rev  = arr[0]  # SHA
          new_rev  = arr[1]  # SHA
          ref_name = refs[2..-1].join('/') # develop, 1.4, dev/mybranch etc.

          next unless branch_to_deploy == ref_name

          found_deployment_branch = true

          case latest_status(old_rev, new_rev, HOT_DEPLOY_MARKER)
          when "A"
            marker_added = true
          when "D"
            marker_deleted = true
          end

          break
        end

        hot_deploy = marker_added || (marker_committed && !marker_deleted)

        # only call pre_receive if
        # - this is the first build ever, i.e. app-root/runtime/repo doesn't exist, OR
        # - auto deployments are enabled
        repo_dir = PathUtils.join(@container.container_dir, 'app-root', 'runtime', 'repo')
        if !File.exist?(repo_dir) or (found_deployment_branch and ENV['OPENSHIFT_AUTO_DEPLOY'] != 'false')
          @container.pre_receive(out: $stdout, err: $stderr, hot_deploy: hot_deploy)
        end
      end
    end
  end
end

command :postreceive do |c|
  c.syntax = "#{name} postreceive"

  c.description = "Run the git postreceive steps"
  c.action do |args, options|
    do_command(c, options) do
      if ENV['OPENSHIFT_DEPLOYMENT_TYPE'] == 'binary'
        puts "OPENSHIFT_DEPLOYMENT_TYPE is 'binary' - git-based deployments are disabled."
      else
        # determine the branch to deploy, in order of priority:
        # - if $OPENSHIFT_DEPLOYMENT_BRANCH is set, use that
        # - fallback to master
        branch_to_deploy = ENV['OPENSHIFT_DEPLOYMENT_BRANCH'] || 'master'

        found_deployment_branch = false

        $stdin.each_line do |str|
          arr  = str.split
          refs = arr[2].split('/')
          ref_name = refs[2..-1].join('/') # develop, 1.4, dev/mybranch etc.

          next unless branch_to_deploy == ref_name

          found_deployment_branch = true
          break
        end

        # only call post_receive if
        # - this is the first build ever, i.e. app-root/runtime/repo doesn't exist, OR
        # - auto deployments are enabled
        repo_dir = PathUtils.join(@container.container_dir, 'app-root', 'runtime', 'repo')
        if !File.exist?(repo_dir) or (found_deployment_branch and ENV['OPENSHIFT_AUTO_DEPLOY'] != 'false')
          result = @container.post_receive(out: $stdout,
                                           err: $stderr,
                                           hot_deploy: file_committed?(HOT_DEPLOY_MARKER),
                                           branch: branch_to_deploy,
                                           force_clean_build: file_committed?(FORCE_CLEAN_BUILD_MARKER),
                                           report_deployments: true,
                                           all: true)

          puts "Result: #{result[:status]}"

          if distribute_result = result[:distribute_result] and not distribute_result[:gear_results].empty?
            distribute_status = distribute_result[:status]
            puts "Distribution status: #{distribute_status}"

            if distribute_status != RESULT_SUCCESS
              puts "Distribution failed for the following gears:"
              failures = distribute_result[:gear_results].values.select { |r| r[:status] != RESULT_SUCCESS }
              puts failures.map { |f| "#{f[:gear_uuid]} (#{f[:errors][0]})" }.join("\n")
            end
          end

          if activate_result = result[:activate_result]
            activate_status = activate_result[:status]
            puts "Activation status: #{activate_status}"

            if activate_status != RESULT_SUCCESS
              puts "Activation failed for the following gears:"
              failures = activate_result[:gear_results].values.select { |r| r[:status] != RESULT_SUCCESS }
              puts failures.map { |f| "#{f[:gear_uuid]} (#{f[:errors][0]})" }.join("\n")
            end
          end

          puts "Deployment completed"
        end
      end
    end
  end
end

command :build do |c|
  c.syntax = "#{name} build"

  c.description = "Run the build steps"
  c.action do |args, options|
    do_command(c, options) do
      @container.build(out: $stdout, err: $stderr)
    end
  end
end

command :prepare do |c|
  c.syntax = "#{name} prepare <file>"

  c.description = "Prepare a binary deployment artifact for distribution and activation"
  c.action do |args, options|
    # TODO make sure there is a file arg
    do_command(c, options) do
      # pass force_clean_build:true so we don't move/copy dependencies from any prior deployment
      deployment_datetime = @container.create_deployment_dir(force_clean_build: true)
      @container.prepare(out: $stdout, err: $stderr, deployment_datetime: deployment_datetime, file: args[0])
    end
  end
end

command :distribute do |c|
  c.syntax = "#{name} distribute <deployment id>"

  c.description = "Distribute a build"
  c.action do |args, options|
    # TODO make sure there is a deployment id arg
    do_command(c, options) do
      @container.distribute(out: $stdout, err: $stderr, deployment_id: args[0])
    end
  end
end

command :activate do |c|
  c.syntax = "#{name} activate <deployment id>"

  c.description = "Activate a build"
  c.option "--init", "Run post_install for new gears"
  c.option "--[no-]hot-deploy", "Perform hot deployment according to the specified "\
           "argument rather than checking for the presence of the hot_deploy marker in the application Git repo"
  c.option "--as-json", "Render the results as JSON to stdout"
  c.option "--all", "Activate all gears in the application (only applicable if executed from a proxy gear)"
  c.option "--no-rotation", "Don't rotate gears out/in"

  c.action do |args, options|
    # TODO make sure there is a deployment id arg
    do_command(c, options) do
      if options.hot_deploy.nil?
        hot_deploy_enabled = file_committed?(HOT_DEPLOY_MARKER)
      else
        hot_deploy_enabled = options.hot_deploy
      end

      result = @container.activate(deployment_id: args[0], hot_deploy: hot_deploy_enabled, init: options.init, all: !!options.all, rotate: !!!options.no_rotation, report_deployments: true)

      $stdout.puts(JSON.dump(result)) if options.as_json
    end
  end
end

command :archive_deployment do |c|
  c.syntax = "#{name} archive-deployment"

  c.option "--deployment-id ID", "Deployment ID to archive"

  c.description = "Archive the current deployment"
  c.action do |args, options|
    @container.archive options.deployment_id
  end
end

command :create_deployment_dir do |c|
  c.syntax = "#{name} create_deployment_dir"
  c.description = "Create a deployment directory and force a clean build. Should only be used by CI builders"
  c.action do |args, options|
    puts @container.create_deployment_dir
  end
end

command :remotedeploy do |c|
  c.syntax = "#{name} remotedeploy [options]"

  c.description = "Run the remotedeploy steps"
  c.option "--[no-]hot-deploy", "Perform hot deployment according to the specified "\
           "argument rather than checking for the presence of the hot_deploy marker in the application Git repo"
  c.option "--deployment-datetime NAME" "Datetime to deploy"

  c.action do |args, options|
    do_command(c, options) do
      if options.hot_deploy.nil?
        hot_deploy_enabled = file_committed?(HOT_DEPLOY_MARKER)
      else
        hot_deploy_enabled = options.hot_deploy
      end

      result = @container.remote_deploy(out: $stdout,
                                        err: $stderr,
                                        hot_deploy: hot_deploy_enabled,
                                        deployment_datetime: options.deployment_datetime,
                                        report_deployments: true,
                                        all: true)

      if result[:status] != RESULT_SUCCESS
        raise "Error deploying to gear"
      end
    end
  end
end

command :deploy do |c|
  c.syntax = "#{name} deploy"

  c.description = "Run the deploy steps"
  c.action do |args, options|
    do_command(c, options) do
      # determine the ref to deploy, in order of priority:
      # - args[0], which would mean the user did "gear deploy mybranch"
      # - if $OPENSHIFT_DEPLOYMENT_BRANCH is set, use that
      # - fallback to master
      ref_to_deploy = args[0] || ENV['OPENSHIFT_DEPLOYMENT_BRANCH'] || 'master'

      @container.deploy(hot_deploy: file_committed?(HOT_DEPLOY_MARKER), force_clean_build: false, ref: ref_to_deploy, out: $stdout, err: $stderr, report_deployments: true)
    end
  end
end

command :archive do |c|
  c.syntax = "#{name} archive"
  c.description = "Archive the current deployment so it can be used as a binary deployment artifact"
  c.option "--file FILE", "The path to the file to create"
  c.action do |args, options|
    do_command(c, options) do
      File.open(options.file, "w") { |f| f.write @container.archive }
    end
  end
end

command :deployments do |c|
  c.syntax = "#{name} deployments"
  c.description = "List the gear's deployments"
  c.action do |args, options|
    do_command(c, options) do
      puts @container.list_deployments
    end
  end
end

command :start do |c|
  c.syntax = "#{name} start"

  c.option "--cart CART", "The cart to start"

  c.description = "Start the gear/cart"
  c.action do |args, options|
    do_command(c, options) do
      if options.cart
        @container.start(options.cart, out: $stdout, err: $stderr)
      else
        puts "Starting gear..."
        @container.start_gear(out: $stdout, err: $stderr)
      end
    end
  end
end

command :stop do |c|
  c.syntax = "#{name} stop"

  c.option "--cart CART", "The cart to stop"
  c.option "--conditional", "Skip the gear stop if the hot deploy marker is present in the application Git repo"
  c.option "--exclude-web-proxy", "Skip stopping the web proxy, if it exists"

  c.description = "Stop the gear/cart"
  c.action do |args, options|
    do_command(c, options) do
      if options.cart
        @container.stop(options.cart, out: $stdout, err: $stderr)
      else
        if options.conditional && file_committed?(HOT_DEPLOY_MARKER)
          puts "Skipping gear stop due to presence of hot deploy marker"
        else
          puts "Stopping gear..."

          @container.stop_gear(exclude_web_proxy: !!options.exclude_web_proxy, out: $stdout, err: $stderr)
        end
      end
    end
  end
end

command :restart do |c|
  c.syntax = "#{name} restart"

  c.option "--cart CART", "The cart to restart"
  c.option "--all", "Restart all instances of the specified cartridge for all gears for this application"
  c.option "--as-json", "Render the results as JSON to stdout"

  c.description = "Restart a cart"
  c.action do |args, options|
    # TODO: Should we be able to restart the gear via stop_gear / start_gear calls
    # in addition to individual cart restarts?
    do_command(c, options) do
      options.cart ||= choose("Cart to restart?", *gear_cartridge_names)
      out = nil
      err = nil
      if !options.as_json
        out = $stdout
        err = $stderr
      end
      result = @container.restart(options.cart, all: !!options.all, out: out, err: err)
      $stdout.puts(JSON.dump(result)) if options.as_json
    end
  end
end

command :reload do |c|
  c.syntax = "#{name} reload"

  c.option "--cart CART", "The cart to reload"

  c.description = "Reload a cart"
  c.action do |args, options|
    do_command(c, options) do
      options.cart ||= choose("Cart to reload?", *gear_cartridge_names)
      @container.reload(options.cart)
    end
  end
end

command :status do |c|
  c.syntax = "#{name} status"

  c.option "--cart CART", "The cart to get the status for"

  c.description = "Get the status for a cart"
  c.action do |args, options|
    do_command(c, options) do
      options.cart ||= choose("Cart to get the status for?", *gear_cartridge_names)
      puts @container.status(options.cart)
    end
  end
end

command :snapshot do |c|
  c.syntax = "#{name} snapshot"

  c.description = "Snapshot an application"
  c.action do |args, options|
    @container.snapshot
  end
end

command :restore do |c|
  c.syntax = "#{name} restore"

  c.option "--restore-git-repo", "Rebuild the application as part of restoration"

  c.description = "Restore an application"
  c.action do |args, options|
    @container.restore(options.restore_git_repo)
  end
end

command :'rotate-out' do |c|
  c.syntax = "#{name} disable-web-proxy"

  c.option "--cart CART", "The cart to update"
  c.option "--persist", "Store the disabling of this gear in the proxy configuration file"
  c.option "--gear UUID", "UUID of the gear to disable"
  c.option "--as-json", "Render the results as JSON to stdout"

  c.description = "Disables this gear from receiving traffic from the proxy"
  c.action do |args, options|
    result = @container.update_proxy_status(cartridge: options.cart,
                                            action: :disable,
                                            gear_uuid: options.gear || @container.uuid,
                                            persist: !!options.persist)

    $stdout.puts(JSON.dump(result)) if options.as_json
  end
end

command :'rotate-in' do |c|
  c.syntax = "#{name} enable-web-proxy"

  c.option "--cart CART", "The cart to update"
  c.option "--persist", "Store the enabling of this gear in the proxy configuration file"
  c.option "--gear UUID", "UUID of the gear to disable"
  c.option "--as-json", "Render the results as JSON to stdout"

  c.description = "Enables this gear to receive traffic from the proxy"
  c.action do |args, options|
    result = @container.update_proxy_status(cartridge: options.cart,
                                            action: :enable,
                                            gear_uuid: options.gear || @container.uuid,
                                            persist: !!options.persist)

    $stdout.puts(JSON.dump(result)) if options.as_json
  end
end
