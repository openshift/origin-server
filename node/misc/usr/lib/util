#!/bin/bash
[ ! -z "$OO_NODE_UTIL" ] && return 0
OO_NODE_UTIL=true

function error {
    echo "$1" 1>&2
    exit "$2"
}

function warning {
    echo "$1" 1>&2
    #echo "$2"
}

function client_result {
    echo "CLIENT_RESULT: $1"
}

function client_message {
    echo "CLIENT_MESSAGE: $1"
}

function client_error {
    echo "CLIENT_ERROR: $1"
}

function client_internal_error {
    echo "CLIENT_INTERNAL_ERROR: $1"
}

function client_debug {
    echo "CLIENT_DEBUG: $1"
}

function set_app_info {
    echo "APP_INFO: $1"
}

function send_attr {
    echo "ATTR: $1"
}

function add_ssh_key {
    echo "SSH_KEY_ADD: $1"
}

function add_app_ssh_key {
    echo "APP_SSH_KEY_ADD: $1 $2"
}

function remove_ssh_key {
    echo "SSH_KEY_REMOVE: "
}

function remove_app_ssh_key {
    echo "APP_SSH_KEY_REMOVE: $1"
}

function add_env_var {
    echo "ENV_VAR_ADD: $1"
}

function remove_env_var {
    echo "ENV_VAR_REMOVE: $1"
}

function app_remove_env_var {
    echo "APP_ENV_VAR_REMOVE: $1"
}

function add_broker_auth_key {
    echo "BROKER_AUTH_KEY_ADD: "
}

function remove_broker_auth_key {
    echo "BROKER_AUTH_KEY_REMOVE: "
}

function cart_data {
    echo "CART_DATA: $@"
}

function cart_props {
    echo "CART_PROPERTIES: $@"
}

function generate_password {
    head -n 50 /dev/urandom|tr -dc "a-np-zA-NP-Z1-9-_"|fold -w 12 | grep -v '^-' | head -n1
}

function generate_username {
    if [ "$1" ]
    then
        username="$1"
    else
        username="admin"
    fi

    remain=$(( 12 - ${#username} ))
    if [ "$remain" -ge 1 ]
    then
        rnstr=$(head -n 50 /dev/urandom|tr -dc "a-np-zA-NP-Z1-9"|fold -w $remain | head -n1)
        username="${username}${rnstr}"
    fi
    echo $username
}

function log_message() {
   msg=${1-""}
   [ -z "$msg" ]  &&  return 0
   logger -i -s "run-scheduled-openshift-origin-user-jobs" -p user.info "`date`: $msg"
}

function openshift_origin_users() {
    grep ":${GEAR_GECOS}:" /etc/passwd | cut -d: -f1 | tr '\n' ' '
}

function get_app_state {
  get_cartridge_state `openshift_state_dir`
}

function get_cartridge_state {
  _state_file="$1/.state"
  if [ -f "$_state_file" ]; then
    cat "$_state_file"
  else
    echo unknown
  fi
}

function wait_for_stop {
    pid=$1
    for i in {1..60}
    do
        if `ps --pid $pid > /dev/null 2>&1`
        then
            echo "Waiting for stop to finish"
            sleep .5
        else
            break
        fi
    done
}

function print_user_running_processes {
    userid=$1
    echo ""
    echo "Running Processes:"
    echo ""
    ps -FCvx -U "${userid}"
    echo ""
}
