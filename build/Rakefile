require 'rake'

basedir = File.dirname(File.dirname(__FILE__))
rpmdir = "#{File.dirname(__FILE__)}/rpms"
remix_dir = "#{File.dirname(__FILE__)}/remix"
skip_specs = [ "jbosseap" ]

def sudo(cmd)
  if STDIN.tty?
    sh "sudo bash -c '#{cmd}'"
  else
    sh "su -c '#{cmd}'"
  end
end

def repo_string(rpmdir)
redhat_release = File.open("/etc/redhat-release").read
  if redhat_release.match(/Fedora/)
  <<-EOF
[local_build]
name    = local_build
baseurl = file://#{rpmdir}/noarch
gpgcheck= 0
enabled = 1

[openshift_origin]
name    = openshift_origin
baseurl = http://mirror.openshift.com/pub/crankcase/fedora-$releasever/$basearch
gpgcheck= 0
enabled = 1

[fedora_ruby]
name    = openshift_origin
baseurl = http://mirror.openshift.com/pub/fedora-ruby/$basearch
gpgcheck= 0
enabled = 1
  EOF
  else
  <<-EOF
[local_build]
name    = local_build
baseurl = file://#{rpmdir}/noarch
gpgcheck= 0
enabled = 1

[openshift_origin]
name    = openshift_origin
baseurl = http://mirror.openshift.com/pub/crankcase/rhel-6/$basearch
gpgcheck= 0
enabled = 1
  EOF
  end
end

def build_srpm(specs, rpmdir, test_build=true)
  specs.each do |spec|
    dir = File.dirname(spec)
    spec_file = File.basename(spec)
    if test_build
      sh "cd #{dir} && tito build --test --srpm -o #{rpmdir} #{spec_file} 2>&1"
    else
      sh "cd #{dir} && tito build --srpm -o #{rpmdir} #{spec_file} 2>&1"
    end
  end
end

def build_rpm(specs, rpmdir, test_build=true)
  if test_build
    specs.each do |spec|
      dir = File.dirname(spec)
      spec_file = File.basename(spec)
      sh "cd #{dir} && tito build --test --rpm -o #{rpmdir} #{spec_file} 2>&1"
    end
  else
    sh "mock -r fedora-16-x86_64 --resultdir=#{rpmdir}/noarch #{rpmdir}/*.src.rpm"
  end
end

task :default => [:build] do
end

task :build_setup do
  print "Setting up basic requirements\n"
  sudo "yum install -y vim git wget tito ruby rubygems java-1.6.0-openjdk jpackage-utils java-1.6.0-openjdk-devel emacs fedora-kickstarts livecd-tools tig mock createrepo"
  Rake::Task[:createrepo].invoke

  print "Setting up local express.conf\n"
  sh "mkdir -p ~/.openshift/"
  sh "echo 'libra_server=localhost' >> ~/.openshift/express.conf"
  sh "echo 'default_rhlogin=admin' >> ~/.openshift/express.conf"
  sudo "/usr/sbin/usermod -a -G mock #{Etc.getlogin}"

  print "Going through each spec file and pre-installing required packages"
  specs   = Dir.glob("#{basedir}/**/*.spec")
  requires = []
  specs.delete_if do |spec|
     skip_specs.select { |s| spec.match(s) }.length > 0
  end

  packages = specs.map do |spec|
     lines = File.open(spec, "r").readlines.delete_if{ |line| !line.match(/^Requires: /) }.map!{ |req| req.split(/:/)[-1].gsub(/[=><%{}]*/, '') }
  end
  packages.flatten!
  packages.delete_if { |req| req.match(/stickshift|cartridge|swingshift|gearchanger|uplift/) }
  packages = packages.join(" ").gsub("\n","").gsub("(","-").gsub(")","")
  sudo "yum install -y --skip-broken #{packages}"
end

task :build do
  mkdir_p "#{rpmdir}/noarch"
  
  specs = Dir.glob("#{basedir}/**/*.spec")
  spec_revisions = {}
  specs.delete_if do |spec|
    if skip_specs.select { |s| spec.match(s) }.length > 0
      true
    else
      revinfo = `git log -1 --oneline #{File.dirname(spec)}`.split()[0]
      spec_name = File.basename(spec)[0..-6]
      Dir.glob("#{rpmdir}/*#{spec_name}*#{revinfo}.fc16.src.rpm").length > 0
    end
  end

  build_rpm(specs, rpmdir, true)
  Rake::Task[:createrepo].invoke
end

task :prodbuild do
  mkdir_p "#{rpmdir}/noarch"

  need_tags = false
  specs   = Dir.glob("#{basedir}/**/*.spec")
  spec_revisions = {}
  specs.delete_if do |spec|
    if skip_specs.select { |s| spec.match(s) }.length > 0
      true
    else
      revinfo = `git log -1 --oneline #{File.dirname(spec)}`.split()[0]
      spec_name = File.basename(spec)[0..-6]
      tags    = `git tag -l --contains #{revinfo} \\*#{spec_name}\\*`.split("\n")
      if tags.length == 0
        print "WARNING: #{spec} needs to be tagged!\n"
        need_tags = true
        false
      else
        Dir.glob("#{rpmdir}/#{tags[-1].strip}*.fc16.src.rpm").length > 0
      end
    end
  end
  exit(-1) if need_tags
  
  build_srpm(specs, rpmdir, false)
  build_rpm(specs, rpmdir, false) 
  createrepo
end

task :prodcd => [:clean, :prodbuild, :livecd] do
end

task :prodinstall => [:clean, :prodbuild, :install_broker, :install_node] do
end

task :devcd => [:build, :livecd] do
end

task :devbroker => [:build, :install_broker] do
end

task :devnode => [:build, :install_node] do
end

task :livecd do
  mkdir_p remix_dir
  remix_ks = "openshift-origin-remix.ks"
  git_rev = `git log --pretty="format:%H %cd" -1`

  sh "rm -f #{remix_dir}/#{remix_ks}"

  ks_data = File.read("#{basedir}/build/openshift-origin-broker/kickstart/#{remix_ks}").gsub(/#ADDITIONAL REPOS/, "repo --name=local-build --baseurl=file://#{rpmdir}/noarch\n#ADDITIONAL REPOS")
  ks_data.gsub!(/#GIT_REV#/,git_rev)
  File.open("#{remix_dir}/#{remix_ks}", 'w') do |out|
    out << ks_data
  end

  if File.exist?("#{basedir}/build/extras")
    sh "createrepo #{basedir}/build/extras"
    ks_data = File.read("#{remix_dir}/#{remix_ks}").gsub(/#ADDITIONAL REPOS/, "repo --name=local-extras --baseurl=file://#{basedir}/build/extras\n#ADDITIONAL REPOS")
    ks_data.gsub!(/#cartridge/,"cartridge")
    File.open("#{remix_dir}/#{remix_ks}", 'w') do |out|
      out << ks_data
    end
  end
  
  sudo "/usr/sbin/setenforce 0"
  sudo "cd #{remix_dir} && livecd-creator -c openshift-origin-remix.ks -f openshift_origin --cache=cache -d -v --logfile=livecd.log"
  sudo "/usr/sbin/setenforce 1"
end

task :createrepo do
  sh "mkdir -p #{rpmdir}/noarch"
  sh "createrepo #{rpmdir}/noarch"
  File.open("#{rpmdir}/ss.repo", 'w') do |out|
    out << repo_string(rpmdir)
  end
  sudo "cp #{rpmdir}/ss.repo /etc/yum.repos.d/"
end

task :install_broker do
  sudo "yum erase -y stickshift-* rubygem-stickshift-*"
  sudo "yum clean metadata"
  sudo "yum install -y openshift-origin-broker openshift-origin-node cartridge-* --skip-broken"
end

task :install_node do
  sudo "yum erase -y openshift-origin-node cartridge-* rubygem-stickshift-node rubygem-stickshift-abstract rubygem-stickshift-common"
  sudo "yum clean metadata"
  sudo "yum install -y openshift-origin-node cartridge-* --skip-broken"
end

task :clean do
  sudo "rm -rf #{rpmdir}/*"
  sudo "rm -rf /etc/yum.repos.d/ss.repo #{remix_dir}/cache/local-build #{remix_dir}/livecd.log #{remix_dir}/openshift_origin.iso"
end
