#!/usr/bin/env ruby
#--
# Copyright 2010 Red Hat, Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#++

require 'rubygems'
require 'parseconfig'
require 'getoptlong'

def usage
    puts <<USAGE
== Synopsis

ss-setup-broker: Script to setup the broker and required services on this machine.
  This command must be run as root.

== Usage
  -i|--static-ip <IP>                   Sets up the vm to use a static IP and not regenrate the forwarders file using dhcp hooks
  -n|--static-dns <IP>[,<IP>]		Comma seperated list of IP addresses to use for DNS forwarding
  -d|--eth-device                       Ethernet device to use for broker setup. Defaults to eth0
  -h|--help                             Print this message

USAGE
end

opts = GetoptLong.new(
    ["--static-ip",           "-i", GetoptLong::OPTIONAL_ARGUMENT],        
    ["--static-dns",          "-n", GetoptLong::OPTIONAL_ARGUMENT],        
    ["--eth-device",          "-d", GetoptLong::OPTIONAL_ARGUMENT],        
    ["--help",                "-?", GetoptLong::NO_ARGUMENT])

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

eth_device = args["--eth-device"] || "eth0"
use_dhcp   = args["--static-ip"].nil?
dns        = args["--static-dns"]
dns_address = dns.split(/,/) unless dns.nil?

if use_dhcp
  ip_address = `ip addr show dev #{eth_device} | awk '/inet / { split($2,a, "/") ; print a[1];}'`
else
  ip_address = args["--static-ip"]
end

if dns_address.nil?
  if use_dhcp
    dns_address = `cat /var/lib/dhclient/dhclient-*#{eth_device}.lease* | grep domain-name-servers | awk '{print $3}' | sort -u`.split(";\n").map{ |ips| ips.split(",") }.flatten
    dns_address.delete '127.0.0.1'
  else
    dns_address = ["8.8.8.8", "8.8.4.4"]
  end
end

if dns_address.nil? || dns_address.length == 0
  print "Error: Unable to determine DNS servers.\n\n"
  usage
  exit -1
end

if ip_address.nil? || ip_address.empty?
  print "Error: Unable to determine IP address of server.\n\n"
  usage
  exit -1
end

if args["--help"]
  usage
  exit -1
end

if use_dhcp
  File.open("/etc/sysconfig/network-scripts/ifcfg-#{eth_device}","w") do |f|
    f.write "DEVICE=#{eth_device}\n"
    f.write "BOOTPROTO=dhcp\n"
    f.write "ONBOOT=yes\n"
    f.write "NM_MANAGED=no\n"
  end
end

unless File.exist?('/etc/rndc.key')
  print  "Unable to find rnds.key .. generating\n"
  system "rndc-confgen -a"
  system "/sbin/restorecon /etc/rndc.* /etc/named.*"
  system "chown root:named /etc/rndc.key"
  system "chmod 0640 /etc/rndc.key"
end

if system("chkcinfig --list NetworkManager")
  system "chkconfig NetworkManager off"
  system "service NetworkManager stop"
end
system "chkconfig network on"
system "service network restart"

#pickup new IP incase it changed
if use_dhcp
  ip_address = `ip addr show dev #{eth_device} | awk '/inet / { split($2,a, "/") ; print a[1];}'`
end

print "Opening required ports\n"
system "lokkit --service=ssh"
system "lokkit --service=http"
system "lokkit --service=https"
system "lokkit --service=dns"
system "lokkit -p 5672:tcp"  #qpid

print "Starting mongodb\n"
system("chkconfig mongod on")
system("service mongod start")

print "Initializing mongodb database..."
#..wait for mongo to initialize
while not system('/bin/fgrep "[initandlisten] waiting for connections" /var/log/mongodb/mongodb.log') do
  print "."
  sleep 5
end

print "Setup mongo db user\n"
print `/usr/bin/mongo localhost/stickshift_broker_dev --eval 'db.addUser("stickshift", "mooo")'`

print "Configure and start local named\n"
File.open("/var/named/forwarders.conf", "w") do |f|
  f.write("forwarders { #{dns_address.join(" ; ")} ; } ;")
end
system "/sbin/restorecon -v /var/named/forwarders.conf"
system "chkconfig named on"
system "service named restart"
system "/usr/bin/ss-register-dns -h broker -n #{ip_address}"

print "Update resolve.conf with dns servers\n"
File.open("/etc/resolv.conf", "w") do |f|
  f.write("nameserver 127.0.0.1\n")
  dns_address.each { |ns| f.write("nameserver #{ns}\n") }
end
  
print "Register admin user\n"
`mongo stickshift_broker_dev --eval 'db.auth_user.update({"_id":"admin"}, {"_id":"admin","user":"admin","password":"2a8462d93a13e51387a5e607cbd1139f"}, true)'`
 
["httpd","sshd","qpidd","mcollective","stickshift-broker","stickshift-proxy"].each do |service|
  system "chkconfig #{service} on" 
  system "service #{service} restart"
end

print "Connect node services to local broker\n"
system "/usr/bin/ss-setup-node --with-node-hostname broker --with-broker-ip #{ip_address}"
