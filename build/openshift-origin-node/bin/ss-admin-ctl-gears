#!/bin/bash
lockfile=/var/lock/subsys/stickshift-gears
numparallel=5
timeout=90

source /usr/libexec/stickshift/cartridges/abstract/info/lib/util

# colors, use like: echo "${RED}FAILED!!!${NORM}"
RED=$(echo -e "\033[31m")
GREEN=$(echo -e "\033[32m")
NORM=$(echo -e "\033[0m")

. /etc/rc.d/init.d/functions

function print_column() {
    sameline="false"
    if [ "$1" == "-n" ]
    then
        shift
        sameline="true"
    fi

    length=$1
    msg=$2
    numspaces=$(( $length - ${#msg} ))

    echo -n "$msg"

    for ix in $(seq $numspaces)
    do
        echo -n ' '
    done
    if [ "$sameline" == "false" ]
    then
        echo
    fi
}

function stickshift_gears() {
    grep ":StickShift guest:" /etc/passwd | cut -d: -f1
}

#
# Given a username, get the home directory
#
function homedir() {
    # USERNAME=$1
    grep "^$1:" /etc/passwd | cut -d: -f 6
}

RETVAL=0
GROUP_RETVAL=0

# Disable IPV6 - SELinux Friendly
if [ -f /proc/sys/net/ipv6/conf/all/disable_ipv6 ]
then
    echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
fi

if [ -f /proc/sys/net/ipv6/conf/default/disable_ipv6 ]
then
    echo 1 > /proc/sys/net/ipv6/conf/default/disable_ipv6
fi

return_output() {
    if [ "$1" ]; then
	echo >> "$1" 2>&1
	cat "$1" | sed -e "s#\[  OK  \]#\[  ${GREEN}OK${NORM}  \]#" -e "s#\[FAILED\]#\[${RED}FAILED${NORM}\]#"
	rm -f "$1"
    fi
}

return_terminate() {
    print_column -n 59 "Timeout $1..."
    echo "[${RED}FAILED${NORM}]"
    exit 1
}

startgear() {
    # GEARNAME=$1
    local OUTFILE=$(mktemp /var/run/stickshift/stickshift_init-startgear-$1.XXXXXXXX)
    trap "return_terminate $1 $OUTFILE" USR1
    echo "Starting $1..." >> $OUTFILE 2>&1
    (
        APP_HOME=$(homedir $1)
        for CART in $(get_start_order)
        do
          startcart $1 $CART >> $OUTFILE 2>&1
        done
    ) &
    wait
    return_output $OUTFILE
}

stopgear() {
    # GEARNAME=$1
    local OUTFILE=$(mktemp /var/run/stickshift/stickshift_init-stopgear-$1.XXXXXXXX)
    trap "return_terminate $1 $OUTFILE" USR1
    echo "Stopping $1..." >> $OUTFILE 2>&1
    (
        APP_HOME=$(homedir $1)
        for CART in $(get_stop_order)
        do
          stopcart $1 $CART >>$OUTFILE 2>&1
        done
    ) &
    wait
    return_output $OUTFILE
}

startcart() {
    # GEARNAME=$1
    # CART=$2
    uid=$(id -u "$1")

    locks=$(ls $(homedir $1)/*/run/stop_lock 2>/dev/null |grep -ve 'app-root|git' |wc -l)
    if [ "$locks" -gt 0 ]
    then
        echo "$1 is locked"
    else
        print_column -n 59 "    $2"
        script_name=/usr/libexec/stickshift/cartridges/$2/info/bin/app_ctl.sh
        local OUTPUT=$(daemon --user="$1" --pidfile=httpd_$1-$2 runcon -t stickshift_t $script_name start)
        RETVAL=$?
        if [ $RETVAL -eq 0 ]
        then
            echo_success
        else
            GROUP_RETVAL=$(($GROUP_RETVAL+1))
            echo_failure
            echo
            echo $OUTPUT
            echo
        fi
        echo
    fi
}

stopcart() {
    # GEARNAME=$1
    # CART=$2
    uid=$(id -u "$1")
    print_column -n 59 "    $2"
    script_name=/usr/libexec/stickshift/cartridges/$2/info/bin/app_ctl.sh
    local OUTPUT=$(daemon --user="$1" --pidfile=httpd_$1-$(basename $2) runcon -t stickshift_t $script_name stop)
    RETVAL=$?
    if [ $RETVAL -eq 0 ]
    then
        echo_success
    else
        GROUP_RETVAL=$(($GROUP_RETVAL+1))
        echo_failure
        echo
        echo $OUTPUT
        echo
    fi
    echo
}

start() {
    echo "Starting StickShift Services: "
    echo

    echo `stickshift_gears` | xargs -d' ' -I{} -n 1 -P $numparallel /usr/bin/timeout -s USR1 $timeout /usr/bin/ss-manage-gears startgear {}

    echo -n "All StickShift services started"
    [ $GROUP_RETVAL -eq 0 ] && touch ${lockfile}
    [ $GROUP_RETVAL -eq 0 ] && success || failure
    echo
    return $GROUP_RETVAL
}

stop() {
    echo "Stopping StickShift Services: "
    echo

    echo `stickshift_gears` | xargs -d' ' -I{} -n 1 -P $numparallel /usr/bin/timeout -s USR1 $timeout /usr/bin/ss-manage-gears stopgear {}

    echo -n "All StickShift services stopped"
    [ $GROUP_RETVAL -eq 0 ] && touch ${lockfile}
    [ $GROUP_RETVAL -eq 0 ] && success || failure
    echo
    return $GROUP_RETVAL
}

restart() {
    # This restarts each app individually. DO NOT change it to simply call stop() and start()
    echo "Restarting StickShift Services: "
    echo

    echo `stickshift_gears` | xargs -d' ' -I{} -n 1 -P $numparallel /usr/bin/timeout -s USR1 $timeout /usr/bin/ss-manage-gears restartgear {}

    echo -n "All StickShift services restarted"
    [ $GROUP_RETVAL -eq 0 ] && touch ${lockfile}
    [ $GROUP_RETVAL -eq 0 ] && success || failure
    echo
    return $GROUP_RETVAL
}

case "$1" in
  startall)
    start
    ;;
  stopall) 
    stop
    ;;
  restartall)
    restart
    ;;
  condrestartall)
    [ -f "$lockfile" ] && restart
    ;;
  status)
    echo "Checking StickShift Services: "

    # check for $1 (user) and $2 (appname)
    # This won't scale forever, but works fine in the '100 or so' range
    for gear in $(grep ':StickShift guest:' /etc/passwd | cut -d: -f6)
    do
        for cartridge in $(ls -d $gear/* |grep -v 'app-root|git')
        do
            cartridge=$(basename $cartridge)
            script_name=/usr/libexec/stickshift/cartridges/$cartridge/info/bin/app_ctl.sh
            runas=$(basename $gear)
            uid=$(id -u "$run_as")
            source_if_exists $gear/.env/SS_APP_NAME
            echo -n "    Checking http for ${SS_APP_NAME:-${runas}}"
            daemon --user=$run_as --pidfile=httpd_$runas_$cartridge runcon -t stickshift_t $script_name status
            RETVAL=$?
            echo
            if [ $RETVAL -eq 0 ]
            then
                echo_success
            else
                GROUP_RETVAL=$(($GROUP_RETVAL+1))
                echo_failure
            fi
        done
    done
    echo
    ;;

  startgear)
    startgear $2
    ;;

  stopgear)
    stopgear $2
    ;;

  restartgear)
    stopgear $2
    startgear $2
    ;;

  startcart)
    startcart $2 $3 
    ;;

  stopcart)
    stopcart $2 $3
    ;;

  restartcart)
    stopcart $2 $3
    startcart $2 $3
    ;;

  *)
    echo "Usage: $0 {startall|stopall|status|restartall|condrestartall}"
    exit 1
esac

exit $RETVAL

