#!/usr/bin/env ruby
#--
# Copyright 2010 Red Hat, Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#++

require 'rubygems'
require 'parseconfig'
require 'yaml'

def usage
    puts <<USAGE
== Synopsis

ss-setup-node: Configure node hostname and broker IP
  This command must be run as root.

== List of arguments
  -b  |--with-broker-ip	                IP address of the broker (required)
  -h  |--with-node-hostname	        Hostname for this node (required)
  -d  |--domain <domain>                Domain name for this node (optional, default: example.com)

 --eip|--external-ip <IP/PREFIX>	Setus up the VM to use a static IP on the external ethernet device. (Defaults to DHCP)
 --egw|--external-gw <IP>		Gateway for external IP (only for non-dhcp address)
 --ed |--external-device		Setus up the VM to use specified ethernet device. Default: eth0


 --iip|--internal-ip <IP/PREFIX>	Setus up the VM to use a static IP on the internal ethernet device. (Defaults to DHCP)
 --id |--internal-device		Setus up the VM to use specified ethernet device. (Defaults to same as external)

  -n  |--static-dns <IP>[,<IP>]		Comma seperated list of IP addresses to use for DNS forwarding
  -?  |--help                           Print this message

USAGE
end

require 'stickshift-node'
opts = GetoptLong.new(
    ["--external-ip",           "--eip", GetoptLong::OPTIONAL_ARGUMENT],
    ["--external-gw",           "--egw", GetoptLong::OPTIONAL_ARGUMENT],
    ["--external-device",       "--ed" , GetoptLong::OPTIONAL_ARGUMENT],

    ["--internal-ip",           "--iip", GetoptLong::OPTIONAL_ARGUMENT],
    ["--internal-gw",           "--igw", GetoptLong::OPTIONAL_ARGUMENT],
    ["--internal-device",       "--id" , GetoptLong::OPTIONAL_ARGUMENT],

    ["--static-dns",            "-n"  , GetoptLong::OPTIONAL_ARGUMENT],
    ["--help",                  "-?"  , GetoptLong::NO_ARGUMENT],
    ["--with-broker-ip",        "-b", GetoptLong::REQUIRED_ARGUMENT],
    ["--with-node-hostname",    "-h", GetoptLong::REQUIRED_ARGUMENT],
    ["--domain",                "-d", GetoptLong::OPTIONAL_ARGUMENT]
)

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

broker_ip = args["--with-broker-ip"]
node_hostname = args["--with-node-hostname"]
node_domain = args["--domain"] || "example.com"

if args["--help"] || (broker_ip.nil? || broker_ip.empty? || node_hostname.nil? || node_hostname.empty?)
  usage
  exit -1
end

ext_eth_device = args["--external-device"] || "eth0"
ext_address    = args["--external-ip"]
ext_address,ext_prefix = ext_address.split("/") unless ext_address.nil?
ext_gw         = args["--external-gw"]

int_eth_device = args["--internal-device"] || ext_eth_device
int_address    = args["--internal-ip"]
int_address,int_prefix = int_address.split("/") unless int_address.nil?

dns            = args["--static-dns"]
dns_address    = dns.split(/,/) unless dns.nil?
ext_dhcp       = false
int_dhcp       = false
use_nm         = File.exist?('/lib/systemd/system/NetworkManager.service')

if ext_address.nil? #DHCP
  ext_address = `ip addr show dev #{ext_eth_device} | awk '/inet / { split($2,a, "/") ; print a[1];}'`
  ext_dhcp = true
end 

if int_address.nil? #DHCP
  int_address = `ip addr show dev #{int_eth_device} | awk '/inet / { split($2,a, "/") ; print a[1];}'`
  int_dhcp = true
end

if !ext_dhcp && (ext_address.nil? || ext_address.empty? || ext_prefix.nil? || ext_prefix.empty? || ext_gw.nil? || ext_gw.empty?)
  usage
  print "Must provide --external-ip <IP/PREFIX> and --external-gw <IP> for statically configuring external ethernet device.\n" 
  exit -1
end

if !int_dhcp && (int_eth_device.nil? || int_eth_device.empty? || int_eth_device == ext_eth_device || int_address.nil? || int_address.empty? || int_prefix.nil? || int_prefix.empty?)
  usage
  print "Must provide --internal-device <DEV> --internal-ip <IP/PREFIX> and --internal-gw <IP> for statically configuring internal ethernet device.\n"
  exit -1
end

ext_hw_address = `ip addr show dev #{ext_eth_device} | grep 'link/ether' | awk '{ print $2 }'`
int_hw_address = `ip addr show dev #{int_eth_device} | grep 'link/ether' | awk '{ print $2 }'`

if dns_address.nil?
  if ext_dhcp
    dns_address = `cat /var/lib/dhclient/dhclient-*#{ext_eth_device}.lease* | grep domain-name-servers | awk '{print $3}' | sort -u`.split(";\n").map{ |ips| ips.split(",") }.flatten
    dns_address.delete '127.0.0.1'
  else
    dns_address = ["8.8.8.8", "8.8.4.4"]
  end
end

if dns_address.nil? || dns_address.length == 0
  usage
  print "Error: Unable to determine DNS servers.\n\n"
  exit -1
end

if args["--help"]
  usage
  exit -1
end

### Begin network setup

File.open("/etc/sysconfig/network-scripts/ifcfg-#{ext_eth_device}","w") do |f|
  f.write "DEVICE=#{ext_eth_device}\n"
  f.write "ONBOOT=yes\n"
  f.write "HWADDR=#{ext_hw_address}\n"
if ext_dhcp
    f.write "BOOTPROTO=dhcp\n"
else
    f.write "BOOTPROTO=static\n"
    f.write "IPADDR=#{ext_address}\n"
    f.write "PREFIX=#{ext_prefix}\n"
    f.write "GATEWAY=#{ext_gw}\n"
end
  f.write "DNS1=#{broker_ip}\n"
  dns_address.each_index do |idx|
    f.write "DNS#{idx+2}=#{dns_address[idx]}\n"
  end

  f.write "TYPE=Ethernet\n"
  f.write "DEFROUTE=yes\n"
  f.write "PEERDNS=no\n" if use_nm
  f.write "PEERROUTES=yes\n"
end

if int_eth_device != ext_eth_device
  File.open("/etc/sysconfig/network-scripts/ifcfg-#{int_eth_device}","w") do |f|
    f.write "DEVICE=#{int_eth_device}\n"
    f.write "ONBOOT=yes\n"
    f.write "HWADDR=#{int_hw_address}\n"
    if int_dhcp
      f.write "BOOTPROTO=dhcp\n"
    else
      f.write "BOOTPROTO=static\n"
      f.write "IPADDR=#{int_address}\n"
      f.write "PREFIX=#{int_prefix}\n"
    end
  end
end

print "Opening required ports\n"
system "lokkit --service=ssh"
system "lokkit --service=http"
system "lokkit --service=https"

File.open("/etc/dhcp/dhclient.conf", "w") do |f|
  f.write("prepend domain-name-servers #{broker_ip};")
  f.write("supersede host-name \"#{node_hostname}\";")
  f.write("supersede domain-name \"#{node_domain}\";")
end

File.open("/etc/sysconfig/network", "w") do |f|
  f.write("NETWORKING=yes\n")
  f.write("HOSTNAME=#{node_hostname}.#{node_domain}\n")
end

system "chkconfig network on"
system "service network restart"

#try to restart network manager and wait for it to acquire IP
system "service NetworkManager restart && sleep 5" if use_nm

### End network setup

system "perl -p -i -e 's/^PUBLIC_IP=.*$/PUBLIC_IP=#{ext_address}/' /etc/stickshift/stickshift-node.conf"
system "perl -p -i -e 's/^CLOUD_DOMAIN=.*$/CLOUD_DOMAIN=#{node_domain}/' /etc/stickshift/stickshift-node.conf"
system "perl -p -i -e 's/^PUBLIC_HOSTNAME=.*$/PUBLIC_HOSTNAME=#{node_hostname}.#{node_domain}/' /etc/stickshift/stickshift-node.conf"
system "perl -p -i -e 's/^(# )?EXTERNAL_ETH_DEV=.*$/EXTERNAL_ETH_DEV=#{ext_eth_device}/' /etc/stickshift/stickshift-node.conf"
system "perl -p -i -e 's/^(# )?INTERNAL_ETH_DEV=.*$/INTERNAL_ETH_DEV=#{int_eth_device}/' /etc/stickshift/stickshift-node.conf"

system "perl -p -i -e 's/^HOSTNAME=.*$/HOSTNAME=#{node_hostname}.#{node_domain}/' /etc/sysconfig/network"
system "perl -p -i -e 's/^plugin\.qpid\.host=.*$/plugin.qpid.host=#{broker_ip}/' /etc/mcollective/client.cfg"
system "perl -p -i -e 's/^plugin\.qpid\.host=.*$/plugin.qpid.host=#{broker_ip}/' /etc/mcollective/server.cfg"
        
config_lines = File.open('/etc/stickshift/stickshift-node.conf').readlines
File.open('/etc/stickshift/stickshift-node.conf','w') do |f|
  config_lines.each do |line|
    if line.start_with? "BROKER_HOST"
      f.write("BROKER_HOST=\"#{broker_ip}\"\n")
    else
      f.write(line)
    end
  end
end

system "chkconfig stickshift-proxy on"
system "hostname #{node_hostname}.#{node_domain}"
system "/etc/cron.minutely/stickshift-facts"
system "service crond restart"
system "service mcollective restart"
system "service stickshift-proxy restart"
system "systemctl enable stickshift-gears.service"
system "/usr/libexec/mcollective/update_yaml.rb /etc/mcollective/facts.yaml"

print "NOTE: Please ensure that the clocks between broker and node are in sync.\n"
