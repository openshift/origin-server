Haproxy cartridge
=================

This readme describes the basic architecture of how we're using haproxy and how
we're doing auto scaling.  haproxy is a FOSS load balancing solution.

Basic Usage
===========

Here's the basic use diagram:

        | Browser |
            |
            |
        | system httpd | (http://myapp-mydomain.rhcloud.com/)
            |
            |
        | haproxy |
            |
            |
        | gear | (http://$short_uuid-mydomain.rhcloud.com:$high_port)

This diagram outlines a single gear but when adding multiple gears they would
all have a unique short_uuid and likely different ports.  Requests come in
to haproxy and then are balanced via sticky sessions.  Sticky sessions mean
when a user comes in and gets assigned a gear it continues to work with
just that gear.  If the gear goes away, the user may lose their session and
get sent to a new gear (and have to log in).  We're working on that.

For now we're encouraging users to store sessions inside a database or
replicated somehow.

Auto Balancing
==============

In order to auto balance we track how much work a gear can do and then add or
remove gears depending on several measurements.  There is also flap protection
in place to prevent haproxy from constantly adding and removing gears.  Removal
won't happen until after a specified timeout from the last addition.

Important files all in cartridges/haproxy-1.4/info/bin/:

  add-gear/remove-gear - symlinks to gear-scale-ctl.rb
  haproxy_ctld - wrapper for gear-scale-ctl.rb and load watcher
  haproxy_ctld_daemon - start haproxy_ctld in daemon mode

add-gear/remove-gear - Used to actually increase or decrease the number of
    gears haproxy points to.  Requires flags, etc.  Can be called manually

haproxy_ctld - Has two modes, auto (in a loop) and manual.  To call in manual
    mode run haproxy_ctld -u or -d to add or remove a gear.  It auto determines
    the flags to send to add/remove-gear from above.

haproxy_ctld_daemon - starts haproxy_ctld in a daemon mode.  Takes standard
    service params.  Like "haproxy_ctld_daemon start"

All of these scripts are designed to be called from within the haproxy gear.
To run them first ssh to your haproxy gear:

    ssh $UUID@$MYAPP-$MYDOM.rhcloud.com

There are also logs kept in the gear in the following locations:
    HAPROXY_DIR = $OPENSHIFT_HOMEDIR/haproxy-1.4

    $OPENSHIFT_HAPROXY_LOG_DIR/scale_events.log - contains scale up / down events
    $HAPROXY_DIR/run/haproxy_ctld.pid - pid file for haproxy_ctld
    $HAPROXY_DIR/run/haproxy_ctld.output - tracebacks and errors

In order to start haproxy_ctld in debug mode (which produces more useful logs):

    $ haproxy_ctld_daemon stop
    $ haproxy_ctld --debug &

Then take a look at $OPENSHIFT_HAPROXY_LOG_DIR/scale_events.log.  You'll see lots of
the following lines:

GEAR_INFO - capacity: 0.0% gear_count: 1 sessions: 0 up/remove_thresh: 90.0%/49.9% sec_left_til_remove: 120 gear_remove_thresh: 0/3

Here's what you're looking at:

capacity: current sessions / total sessions = capacity %
gear_count: Number of gears in the farm
up/remove_thresh: when capacity is above the first number, add gears.
                  when capacity is below the second number, remove gears.
sec_left_till_remove: gets reset when add_gear is run.  Won't remove a gear
                  until after the time has passed to prevent flapping.
gear_remove_thresh: The first number is the number of consecutive checks where
                  capacity was below the remove_thresh.  The second number is
                  the check where gear removal will actually happen.

Summary:  A gear up event will happen whenever capacity is above the up_thresh
    value.  A gear down event will only happen when capacity is below
    remove_thresh value *and* sec_left_til_remove is 0 *and* gear_remove_thresh
    is 3/3.


