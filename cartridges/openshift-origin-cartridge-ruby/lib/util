#!/bin/bash
# Utility functions for use in the cartridge scripts.

function ruby_in_development_mode {
  [ "$RAILS_ENV" == "development" ] && return 0
  [ "$RACK_ENV" == "development" ] && return 0
  return 1
}

function gemfile_modified {

  local bundler_md5_file="${OPENSHIFT_RUBY_DIR}tmp/.bundler_md5sum"

  [ ! -f "${OPENSHIFT_REPO_DIR}Gemfile" ] && return 1

  if [ ! -f "${bundler_md5_file}" ]; then
    md5sum "${OPENSHIFT_REPO_DIR}Gemfile" > "${bundler_md5_file}"
    return 1
  else

    pushd $OPENSHIFT_REPO_DIR 1>/dev/null
    md5sum --status --check "${bundler_md5_file}"
    success=$?
    popd 1>/dev/null

    if success; then
      return 0
    else
      return 1
    fi
  fi
}

function wait_for_stop {
        pid=$1
    for i in {1..300}
    do
        if `ps --pid $pid > /dev/null 2>&1`
        then
            # only print every second
            [ $((100 % 10)) -eq 0 ] && echo "Waiting for stop to finish"
            sleep .1
        else
            break
        fi
    done
}

function update-configuration {
    case "$1" in
      1.9)
        echo -n "${GEM_HOME}/bin:" >$OPENSHIFT_RUBY_DIR/env/OPENSHIFT_RUBY_PATH_ELEMENT
        dirname $(scl enable ruby193 "which ruby") >>$OPENSHIFT_RUBY_DIR/env/OPENSHIFT_RUBY_PATH_ELEMENT

        local ld_path=$(LD_LIBRARY_PATH="" scl enable ruby193 "printenv LD_LIBRARY_PATH")
        path_append $LD_LIBRARY_PATH $ld_path >$OPENSHIFT_RUBY_DIR/env/LD_LIBRARY_PATH

        local man_path=$(MANPATH="" scl enable ruby193 "printenv MANPATH")
        path_append $MANPATH $man_path >$OPENSHIFT_RUBY_DIR/env/MANPATH
        ;;

      1.8)
        rm -f \
            $OPENSHIFT_RUBY_DIR/env/LD_LIBRARY_PATH \
            $OPENSHIFT_RUBY_DIR/env/MANPATH
        echo -n "${GEM_HOME}/bin" > $OPENSHIFT_RUBY_DIR/env/OPENSHIFT_RUBY_PATH_ELEMENT
        ;;
    esac
}

function parse_args {
    while :
    do
        case $1 in
            -h | --help | -\?)
                echo "usage: $0 [--version[=]<value>]"
                exit 0
                ;;
            -v | --version)
                version=$2     # You might want to check if you really got VERSION
                shift 2
                ;;
            --version=*)
                version=${1#*=}        # Delete everything up till "="
                shift
                ;;
            --) # End of all options
                shift
                break
                ;;
            -*)
                echo "WARN: Unknown option... Exiting: $1" >&2
                exit 1
                ;;
            *)  # no more options. Stop while loop
                break
                ;;
        esac
    done
}
