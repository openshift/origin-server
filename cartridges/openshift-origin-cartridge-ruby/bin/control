#!/bin/bash -e

source $OPENSHIFT_CARTRIDGE_SDK_BASH

HTTPD_CFG_FILE=$OPENSHIFT_RUBY_DIR/etc/conf/httpd_nolog.conf

function start() {
    echo "Starting Ruby cart"
    /usr/bin/scl enable ruby193 "/usr/sbin/httpd -C 'Include $OPENSHIFT_RUBY_DIR/etc/conf.d/*.conf' -f $HTTPD_CFG_FILE -k start"
}

function stop() {
    echo "Stopping Ruby cart"

    CART_CONF_DIR=${OPENSHIFT_RUBY_DIR}/etc/conf

    # Stop the app
    # src_user_hook pre_stop_${cartridge_type}
    app_userid=`id -u`
    httpd_pid=`cat ${OPENSHIFT_RUBY_DIR}/run/httpd.pid 2> /dev/null`

    /usr/bin/scl enable ruby193 "/usr/sbin/httpd -C 'Include $OPENSHIFT_RUBY_DIR/etc/conf.d/*.conf' -f $HTTPD_CFG_FILE -k stop"

    for i in {1..20}
    do
        if `ps --pid $httpd_pid > /dev/null 2>&1`  ||  \
           `pgrep -u $app_userid Passenger.* > /dev/null 2>&1`
        then
            if [ $i -gt 4 ]
            then
                if `ps --pid $httpd_pid > /dev/null 2>&1`
                then
                    if [ $i -gt 16 ]
                    then
                        /bin/kill -9 $httpd_pid
                    fi
                elif `pgrep -u $app_userid Passenger.* > /dev/null 2>&1`
                then
                    pkill -9 -u $app_userid Passenger.*
                    break
                fi
            fi
            echo "Waiting for stop to finish"
            sleep .5
        else
            break
        fi
    done

}

function restart() {
    echo "${1}ing Ruby cart"
    touch $OPENSHIFT_REPO_DIR/tmp/restart.txt
    /usr/bin/scl enable ruby193 "/usr/sbin/httpd -C 'Include $OPENSHIFT_RUBY_DIR/etc/conf.d/*.conf' -f $HTTPD_CFG_FILE -k restart"
}

function status() {
   echo "Ruby cart status"
}

function tidy() {
    if [ -d $OPENSHIFT_RUBY_LOG_DIR ]
    then
        client_message "Emptying log dir: ${OPENSHIFT_RUBY_LOG_DIR}"
        rm -rf ${OPENSHIFT_RUBY_LOG_DIR}/* ${OPENSHIFT_RUBY_LOG_DIR}/.[^.]*
    fi

    if [ -d ${OPENSHIFT_RUBY_DIR}tmp/ ]
    then
        client_message "Emptying tmp dir: ${OPENSHIFT_RUBY_DIR}tmp/"
        rm -rf ${OPENSHIFT_RUBY_DIR}tmp/* ${OPENSHIFT_RUBY_DIR}tmp/.[^.]*
    fi
}

function pre-build() {
  # to be implemented
  true
}

function build() {
    echo "Running build on Ruby cart"
    USED_BUNDLER=false
    if [ -d $OPENSHIFT_RUBY_DIR/tmp/.bundle ]
    then
      USED_BUNDLER=true
    fi

    if $USED_BUNDLER
    then
      echo 'Restoring previously bundled RubyGems (note: you can commit .openshift/markers/force_clean_build at the root of your repo to force a clean bundle)'
      mv $OPENSHIFT_RUBY_DIR/tmp/.bundle ${OPENSHIFT_REPO_DIR}
      if [ -d ${OPENSHIFT_REPO_DIR}vendor ]
      then
        mv $OPENSHIFT_RUBY_DIR/tmp/vendor/bundle ${OPENSHIFT_REPO_DIR}vendor/
      else
        mv $OPENSHIFT_RUBY_DIR/tmp/vendor ${OPENSHIFT_REPO_DIR}
      fi
      rm -rf $OPENSHIFT_RUBY_DIR/tmp/.bundle $OPENSHIFT_RUBY_DIR/tmp/vendor
    fi
    
    # If .bundle isn't currently committed and a Gemfile is then bundle install
    if [ -f ${OPENSHIFT_REPO_DIR}/Gemfile ]
    then
        if ! git show master:.bundle > /dev/null 2>&1
        then
            echo "Bundling RubyGems based on Gemfile/Gemfile.lock to repo/vendor/bundle with 'bundle install --deployment'"
            SAVED_GIT_DIR=$GIT_DIR
            unset GIT_DIR
            pushd ${OPENSHIFT_REPO_DIR} > /dev/null
            /usr/bin/scl enable ruby193 "bundle install --deployment"
            popd > /dev/null
            export GIT_DIR=$SAVED_GIT_DIR
        fi

        if [ -f ${OPENSHIFT_REPO_DIR}/Rakefile ]
        then
            echo "Precompiling with 'bundle exec rake assets:precompile'"
            pushd ${OPENSHIFT_REPO_DIR} > /dev/null
            /usr/bin/scl enable ruby193 "bundle exec rake assets:precompile" 2>/dev/null
            popd > /dev/null
        fi
    fi
}

function post-deploy() {
  # to be implemented
  true
}

function threaddump() {
  # to be determined
  true
}


case "$1" in
  start)     start ;;
  stop)      stop ;;
  restart | reload )   restart $1 ;;
  status)    status ;;
  tidy)      tidy ;;
  pre-build) pre-build ;;
  build)     build ;;
  post-deploy) post-deploy ;;
  threaddump) threaddump ;;
  *)         exit 0
esac
