#!/bin/bash

source $OPENSHIFT_CARTRIDGE_SDK_BASH
source ${OPENSHIFT_PHP_DIR}usr/lib/php_context

function select_php_document_root {
    for dir in php public public_html web www; do
        if [ -d "$1/$dir" -o -h "$1/$dir" ]; then
            export OPENSHIFT_PHP_DOCUMENT_ROOT="$1/$dir"
            echo "Application directory \"$dir/\" selected as DocumentRoot"
            return
        fi
    done
    export OPENSHIFT_PHP_DOCUMENT_ROOT="$1"
    echo "Application directory \"/\" selected as DocumentRoot"
}

function system_php_dir {
    local phpscl=$(expr "$(php_context 'echo ${X_SCLS:-}')" : '.*\(php[^ ]\+\).*')
    [ -n "${phpscl}" ] && echo "/opt/rh/${phpscl}/root/etc/php.d" \
        || echo "/etc/php.d"
}

function enable_modules {
    local phpd=${OPENSHIFT_PHP_DIR}usr/${OPENSHIFT_PHP_VERSION}/etc/php.d
    declare -A modules
    local failed_modules=()
    local module=
    local modvar=

    # Disable Xdebug in production by default, if not already enabled
    if [[ "${APPLICATION_ENV:-}" != "development" ]]; then
        OPENSHIFT_PHP_XDEBUG_ENABLED=${OPENSHIFT_PHP_XDEBUG_ENABLED:-false}
    fi

    # Generate OpenShift php.ini
    oo-erb ${OPENSHIFT_PHP_DIR}usr/shared/etc/php.ini.erb > ${PHPRC}

    # Clear PECL config openshift.ini
    echo > ${PHP_INI_SCAN_DIR}/openshift.ini

    # Load modules from paths with the following priority:
    #   1. OpenShift php.d/*.ini.erb
    #   2. OpenShift php.d/*.ini
    #   3. system php.d/*.ini
    # Note: Module can be disabled using `$OPENSHIFT_PHP_<MODULE>_ENABLED=false' ENV VAR
    for file in ${phpd}/{*.ini.erb,*.ini} $(system_php_dir)/*.ini; do
        module=${file##*/}    # basename.ini[.erb]
        module=${module%.erb} # basename.ini
        module=${module%.ini} # basename

        # Is module disabled via ENV VAR?
        modvar="OPENSHIFT_PHP_${module^^}_ENABLED"
        if [[ "${!modvar,,}" == "false" ]]; then
            [ -n "${DEBUG:-}" ] && printf "%14s disabled via %s=false, ignoring %s\n" "$module" "\$OPENSHIFT_PHP_${module^^}_ENABLED" "$file"
            continue
        fi

        # Is module already loaded (from the path with higher priority)?
        if [ -n "${modules[$module]:-}" ]; then
            [ -n "${DEBUG:-}" ] && printf "%14s already enabled, ignoring %s\n" "$module" "$file"
            continue
        fi

        # Save module for later reference and put its configuration into openshift.ini
        modules[$module]=$file
        if [[ $file == *\.erb ]]; then
            [ -n "${DEBUG:-}" ] && printf "%14s enabled, loading from %s (erb-processed)\n" "$module" "$file"
            oo-erb $file >> ${PHP_INI_SCAN_DIR}/openshift.ini
        else
            [ -n "${DEBUG:-}" ] && printf "%14s enabled, loading from %s\n" "$module" "$file"
            cat $file >> ${PHP_INI_SCAN_DIR}/openshift.ini
        fi
    done

    # Are there any modules, whose .so library can't be loaded?
    # Note: Make sure not to Pipe any data into the 'while' loop
    #       and use ProcessSubstitution instead. That way we don't
    #       run the below code in the subprocess, as it would
    #       break the failed_modules variable data.
    while read line; do
        # Did we hit a .so library loading error?
        if [[ ! "$line" == *"cannot open shared object file: No such file or directory"* ]]; then
            [ -n "${DEBUG:-}" ] && printf "Skipping unknown error: %s\n" "$line"
            continue
        fi

        # Parse module name from the error:
        # 1. PHP Extension error: "PHP Warning: PHP Startup: Unable to load dynamic library '/opt/rh/php54/root/usr/lib64/php/modules/debug_ext_php.so' - /opt/rh/php54/root/usr/lib64/php/modules/debug_ext_php.so: cannot open shared object file: No such file or directory in Unknown on line 0"
        # 2. Zend Extension error: "Failed loading debug_ext_zend.so: debug_ext_zend.so: cannot open shared object file: No such file or directory"
        module=${line%%\.so*}   # Strip the first match of ".so" string and everything after that
        module=${module##*[/ ]} # Strip the last slash or whitespace character and everything before that

        # Did we load the module that caused the error? If yes, put it to failed_modules
        if [ -n "${modules[$module]:-}" ]; then
            file="${modules[$module]:-}"
            [ -n "${DEBUG:-}" ] && printf "%14s to be disabled for PHP Warnings, it failed to be loaded (RPM not installed?)\n" "$module"
            failed_modules+=("$module")
        else
            [ -n "${DEBUG:-}" ] && printf "%14s failed to be disabled, can't remember loading that module\n" "$module"
        fi
    done < <(php_context "php -m" 2>&1 1>/dev/null)

    # Disable modules that caused the errors at once
    if [ ${#failed_modules[@]} -gt 0 ]; then
        tmpfile=$(mktemp)
        [ -n "${DEBUG:-}" ] && local IFS=',' && printf "%14s => disabling %s modules in openshift.ini\n" "" "${failed_modules[*]}"
        local IFS='|'
        sed -r 's/(.*[ =/]('"${failed_modules[*]}"')\.so)/;**DISABLED by OpenShift runtime** \1/g' ${PHP_INI_SCAN_DIR}/openshift.ini > $tmpfile
        cat $tmpfile > ${PHP_INI_SCAN_DIR}/openshift.ini
        rm -f $tmpfile
    fi
}
