#!/bin/bash

# Creates a mongodb instance

# Exit on any errors
set -e

function print_help {
    echo "Usage: $0 app-name namespace uuid"

    echo "$0 $@" | logger -p local0.notice -t stickshift_mongodb_configure
    exit 1
}

function prepare_gear_for_standalone_mongodb() {
    [ $# -eq 4 -o $# -eq 3 ] || print_help

    setup_configure "$1" $2 $3 $4
    check_cartridge_dir_doesnt_exist
    unobfuscate_app_home $uuid $namespace $application

    # Source the original application name if any.
    source_if_exists "$APP_HOME/.env/OPENSHIFT_APP_NAME"

    # Repo
    if [ ! -d $git_url ]; then
        clone_external_git_repo $application $user_id $group_id $uuid $git_url
    else
        clone_git_repo $application $user_id $group_id $uuid "MongoDB 2.0"
    fi

    #
    # Create the core of the application
    #
    mkdir -p "$APP_DIR"
    pushd "$APP_DIR" > /dev/null
    create_standard_app_dirs
    popd > /dev/null

    #
    # Find an open localhost IP
    #
    IP=`find_open_ip $uid $uuid`

    create_app_ctl_script "$gear_type"
    populate_repo_dir
    secure_app_dir
    observe_setup_app_and_git_dirs

    #
    # Create environment variables
    #
    create_standard_env_vars
    create_standard_network_env_vars
    create_standard_repo_dir_env_var
    create_standard_path_env_var

    # And prepend to path variable so that mongodb app_ctl.sh script is called.
    sed -i "s#export \s*PATH=#export PATH=$CART_INFO_DIR/bin/:#" $APP_HOME/.env/PATH

    #  Add apache vhost configuration.
    export CART_INFO_DIR
    import_env_vars
    $CART_INFO_DIR/bin/deploy_httpd_proxy.sh $application $namespace $uuid $IP
    restart_httpd_graceful
}

while getopts 'd' OPTION
do
    case $OPTION in
        d) set -x
        ;;
        ?) print_help
        ;;
    esac
done


[ $# -eq 3 ] || print_help

cartridge_type="mongodb-2.0"
source "/etc/stickshift/stickshift-node.conf"
source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/util
CART_INFO_DIR=${CARTRIDGE_BASE_PATH}/embedded/$cartridge_type/info

gear_type="mongodb-2.0"

if [ ! -d "$GEAR_BASE_DIR/$3/$1" ]; then
    #  This gear is dedicated to running mongodb - configure it as such.
    prepare_gear_for_standalone_mongodb "$@"
fi

setup_embedded_configure "$1" $2 $3
disable_cgroups

source ${CART_INFO_DIR}/lib/util

MONGODB_DIR=$(get_cartridge_instance_dir "$cartridge_type")

#
# Detect IP
. $APP_HOME/.env/OPENSHIFT_INTERNAL_IP
IP=$OPENSHIFT_INTERNAL_IP

#
# Create the core of the application
#

if [ -d "$MONGODB_DIR" ]
then
    client_error "Embedded mongodb-2.0 already attached to $application"
    exit 132
fi

create_cartridge_instance_dir "$cartridge_type"
pushd "$MONGODB_DIR" > /dev/null
mkdir -p log etc data socket pid run
sed "s,RHC_MONGODIR,$MONGODB_DIR," $CART_ETC_DIR/mongodb.conf > $MONGODB_DIR/etc/mongodb.conf
sed -i "s,RHC_BIND_ADDR,$IP," $MONGODB_DIR/etc/mongodb.conf
popd > /dev/null

#
# Create simple mongodb start / stop script
#
ln -s $CART_INFO_DIR/bin/mongodb_ctl.sh $MONGODB_DIR/${application}_mongodb_ctl.sh

#
# Setup Permissions
# 

chmod +x "$MONGODB_DIR/"*.sh || error "Failed to chmod new application scripts" 122
chown $user_id.$group_id -R $MONGODB_DIR/ || error "Failed to chown new application space.  Please contact support" 123
# Secure script and root dir (so they can't chown the script"
chown root.root "$MONGODB_DIR" "$MONGODB_DIR"/*.sh
observe_setup_var_lib_dir "$MONGODB_DIR"


start_mongodb

# Generate a password with no o's O's or 0's
password=$(generate_password)

#
# Setup Environment Variables
#
echo "export OPENSHIFT_NOSQL_DB_USERNAME='admin'" > $APP_HOME/.env/OPENSHIFT_NOSQL_DB_USERNAME
echo "export OPENSHIFT_NOSQL_DB_PASSWORD='$password'" > $APP_HOME/.env/OPENSHIFT_NOSQL_DB_PASSWORD
echo "export OPENSHIFT_NOSQL_DB_TYPE='mongodb'" > $APP_HOME/.env/OPENSHIFT_NOSQL_DB_TYPE
echo "export OPENSHIFT_NOSQL_DB_HOST='$IP'" > $APP_HOME/.env/OPENSHIFT_NOSQL_DB_HOST
echo "export OPENSHIFT_NOSQL_DB_PORT='27017'" > $APP_HOME/.env/OPENSHIFT_NOSQL_DB_PORT
echo "export OPENSHIFT_NOSQL_DB_URL='mongodb://admin:$password@$IP:27017/'" > $APP_HOME/.env/OPENSHIFT_NOSQL_DB_URL
echo "export OPENSHIFT_NOSQL_DB_CTL_SCRIPT='$MONGODB_DIR/${application}_mongodb_ctl.sh'" > $APP_HOME/.env/OPENSHIFT_NOSQL_DB_CTL_SCRIPT
echo "export OPENSHIFT_NOSQL_DB_MONGODB_20_DUMP='$CART_INFO_DIR/bin/mongodb_dump.sh'" > $APP_HOME/.env/OPENSHIFT_NOSQL_DB_MONGODB_20_DUMP
echo "export OPENSHIFT_NOSQL_DB_MONGODB_20_DUMP_CLEANUP='$CART_INFO_DIR/bin/mongodb_cleanup.sh'" > $APP_HOME/.env/OPENSHIFT_NOSQL_DB_MONGODB_20_DUMP_CLEANUP
echo "export OPENSHIFT_NOSQL_DB_MONGODB_20_RESTORE='$CART_INFO_DIR/bin/mongodb_restore.sh'" > $APP_HOME/.env/OPENSHIFT_NOSQL_DB_MONGODB_20_RESTORE
echo "export OPENSHIFT_NOSQL_DB_MONGODB_20_EMBEDDED_TYPE='mongodb-2.0'" > $APP_HOME/.env/OPENSHIFT_NOSQL_DB_MONGODB_20_EMBEDDED_TYPE

## Setup user
source_if_exists "$APP_HOME/.env/OPENSHIFT_APP_NAME"
DB_NAME=${OPENSHIFT_APP_NAME:-$application}
echo "use admin
      db.addUser(\"admin\", \"${password}\")
      db.auth(\"admin\", \"${password}\")
      db.system.users.find()
      use $DB_NAME
      db.openshift.save({application: \"$DB_NAME\", dbhost: \"$IP\" })
      db.addUser(\"admin\", \"${password}\")
      exit
     "  | mongo $IP
rm -f /tmp/.dbshell

mongodb_ip="$IP"
mongodb_port="27017"
if is_a_scalable_app; then
   if $(dirname "$0")/expose-port "$@"; then
       source $APP_HOME/.env/OPENSHIFT_GEAR_DNS
       source $APP_HOME/.env/OPENSHIFT_NOSQL_DB_PROXY_PORT
       mongodb_ip=${OPENSHIFT_GEAR_DNS:-"$IP"}
       mongodb_port=${OPENSHIFT_NOSQL_DB_PROXY_PORT:-27017}
   fi
fi

client_result ""
client_result "MongoDB 2.0 database added.  Please make note of these credentials:"
client_result ""
client_result "       Root User: admin"
client_result "   Root Password: $password"
client_result "   Database Name: $DB_NAME"
client_result ""

if is_a_scalable_app; then
    source $APP_HOME/.env/OPENSHIFT_NOSQL_DB_HOST
    client_result "Connection URL: mongodb://$mongodb_ip:$mongodb_port/"
    client_result "MongoDB gear-local connection URL: mongodb://$OPENSHIFT_NOSQL_DB_HOST:$mongodb_port/"
else
    client_result "Connection URL: mongodb://$IP:$mongodb_port/"
fi

client_result ""
client_result "You can manage your new MongoDB by also embedding rockmongo-1.1"

cart_props "connection_url=mongodb://$mongodb_ip:$mongodb_port/"
cart_props "username=admin"
cart_props "password=$password"
cart_props "database_name=$DB_NAME"

set_app_info "Connection URL: mongodb://$mongodb_ip:$mongodb_port/"
enable_cgroups
