#!/bin/bash

# Creates a Node instance

# Exit on any errors
set -e

function print_help() {
   echo "Usage: $0 app-name namespace uuid git-url"
   echo "$0 $@" | logger -p local0.notice -t openshift_origin_nodejs_configure
   exit 1
}

while getopts 'd' OPTION; do
   case $OPTION in
      d)  set -x      ;;
      ?)  print_help  ;;
   esac
done


[ $# -eq 4 -o $# -eq 3 ] || print_help


cartridge_type="nodejs-0.6"
source "/etc/openshift/node.conf"
source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/util

setup_configure "$1" $2 $3 $4
disable_cgroups

check_cartridge_dir_doesnt_exist

# Repo
if [ ! -d $git_url ]; then
	clone_external_git_repo $application $user_id $group_id $uuid $git_url
else
	clone_git_repo $application $user_id $group_id $uuid "Node.js 0.6"
fi

#
# Create the core of the application
#
create_cartridge_instance_dir "$cartridge_type"
NODEJS_INSTANCE_DIR=$(get_cartridge_instance_dir "$cartridge_type")
pushd "$NODEJS_INSTANCE_DIR" > /dev/null
create_standard_app_dirs
mkdir conf node_modules logs sessions
popd > /dev/null

# Link the globally installed npm modules in the app's home directory.
pushd "$APP_HOME" > /dev/null
mkdir node_modules
npmgl="$CART_INFO_DIR/configuration/npm_global_module_list"
module_list=$(perl -ne 'print if /^\s*[^#\s]/' "$npmgl" | tr '\n' ' ')
npm link $module_list > /dev/null 2>&1
mv node_modules .node_modules
popd > /dev/null

#
# Find an open localhost IP
#
IP=`find_open_ip $uid $uuid`

populate_repo_dir

secure_app_dir

secure_cart_instance_dir

observe_setup_app_and_git_dirs

observe_setup_cart_instance_dir

# npm keeps per-user config in ~/.npmrc and cache in ~/.npm/  and
# node-gyp (add-on build tool) uses ~/.node-gyp
# Create files/directories, change ownership and SELinux file security context.
touch "$APP_HOME"/.npmrc
mkdir "$APP_HOME"/.npm
mkdir "$APP_HOME"/.node-gyp
chown $user_id.$group_id -R "$APP_HOME"/.npm "$APP_HOME"/.npmrc  \
                            "$APP_HOME"/.node-gyp
npm config set tmp /tmp

#
# Create environment variables
#
create_standard_cart_env_vars
create_standard_env_uservars
create_standard_network_env_vars $IP
create_cart_network_env_vars $IP
create_standard_repo_dir_env_var
create_standard_path_env_var

observe_setup_env_uservars_dir

if [ ! -d $git_url ]; then
    #
    # Resolve app dependencies for template
    #
    resolve_application_dependencies $uuid $application &
else
    #
    # Start the server
    #
    start_app
fi

#
# Create virtualhost definition for apache
#
export CART_INFO_DIR
$CARTRIDGE_BASE_PATH/abstract/info/bin/deploy_httpd_proxy.sh $application $namespace $uuid $IP

enable_cgroups
