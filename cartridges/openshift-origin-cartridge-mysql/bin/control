#!/bin/bash

source $OPENSHIFT_CARTRIDGE_SDK_BASH

export STOPTIMEOUT=10

function is_running {
  pidfile=$OPENSHIFT_MYSQL_DIR/pid/mysql.pid

  if [ -f $pidfile ]; then
    mysql_pid=`cat $pidfile 2> /dev/null`
    myid=`id -u`

    if `ps --pid $mysql_pid > /dev/null 2>&1` || `pgrep -x mysqld_safe -u $myid > /dev/null 2>&1`
    then
      return 0
    fi
  fi

  return 1
}

# TODO: account for standalone scenario
# TODO: source user hooks?
# Start mysqld and block until it comes up.
function start {
  if ! is_running; then
    /usr/bin/mysqld_safe --defaults-file=$OPENSHIFT_MYSQL_DIR/conf/my.cnf > /dev/null 2>&1 &    
    wait_for_mysqld_availability
  else
    echo "MySQL already running" 1>&2
  fi
}

function wait_for_mysqld_availability {
  pidfile=$OPENSHIFT_MYSQL_DIR/pid/mysql.pid

  if [ -n "$OPENSHIFT_MYSQL_DB_USERNAME" ]; then
    i=0
    sleep 1
    while (( ! touch_mysqld ) || [ ! -f $pidfile ]) && [ $i -lt 30 ]
    do
      sleep 1
      i=$(($i + 1))
    done
  fi
}

function touch_mysqld {
  echo ";" | mysql -h $OPENSHIFT_MYSQL_DB_HOST -P $OPENSHIFT_MYSQL_DB_PORT -u $OPENSHIFT_MYSQL_DB_USERNAME --password="$OPENSHIFT_MYSQL_DB_PASSWORD" > /dev/null 2>&1
}

function stop {
  if is_running; then
    pidfile=$OPENSHIFT_MYSQL_DIR/pid/mysql.pid

    if [ -f $pidfile ]; then
      pid=$( /bin/cat $pidfile )
      /bin/kill $pid
      ret=$?
      if [ $ret -eq 0 ]; then
        TIMEOUT="$STOPTIMEOUT"
        while [ $TIMEOUT -gt 0 ] && [ -f "$pidfile" ]
        do
          /bin/kill -0 "$pid" >/dev/null 2>&1 || break
          sleep 1
          let TIMEOUT=${TIMEOUT}-1
        done
      fi
    else
      if `pgrep -x mysqld_safe > /dev/null 2>&1`; then
        echo "Warning: MySQL process exists without a pid file.  Use force-stop to kill." 1>&2
      else
          echo "MySQL already stopped" 1>&2
      fi
    fi
  fi
}

function status {
  if is_running; then
    client_result "MySQL is running" 
  else
    client_result "MySQL is stopped" 
  fi

  exit 0
}

function pre_snapshot {
  # TODO: add support for scalable apps, where DB is not located on primary gear
  start

  echo "$OPENSHIFT_MYSQL_DB_USERNAME" > $OPENSHIFT_DATA_DIR/mysql_db_username
  echo "$OPENSHIFT_MYSQL_DB_HOST" > $OPENSHIFT_DATA_DIR/mysql_db_host

  dump_file=$OPENSHIFT_DATA_DIR/mysql_dump_snapshot.gz
  local db_host=$OPENSHIFT_MYSQL_DB_HOST
  local db_port=$OPENSHIFT_MYSQL_DB_PORT

  /usr/bin/mysqldump -h $db_host -P $db_port -u $OPENSHIFT_MYSQL_DB_USERNAME --password="$OPENSHIFT_MYSQL_DB_PASSWORD" --all-databases --add-drop-table | /bin/gzip > $dump_file

  if [ ! ${PIPESTATUS[0]} -eq 0 ]; then
    echo 1>&2
    echo "WARNING!  Could not dump mysql!  Continuing anyway" 1>&2
    echo 1>&2
    /bin/rm -rf $OPENSHIFT_DATA_DIR/mysql_dump_snapshot.gz
  else
    if [[ ! ${PIPESTATUS[1]} -eq 0 || ! -f $dump_file ]]; then
      echo 1>&2
      echo "WARNING!  Could not create mysql dump!  Continuing anyway" 1>&2
      echo 1>&2
      /bin/rm -rf $OPENSHIFT_DATA_DIR/mysql_dump_snapshot.gz
    fi
  fi

  stop
}

function post_snapshot {
  true
}

function pre_restore {
  cleanup_dump
}

function post_restore {
  if [ -f $OPENSHIFT_DATA_DIR/mysql_dump_snapshot.gz ]; then
    start

    dbhost=$OPENSHIFT_MYSQL_DB_HOST
    OLD_IP=$(/bin/cat $OPENSHIFT_DATA_DIR/mysql_db_host)
    NEW_IP=$OPENSHIFT_MYSQL_DB_HOST

    if [ -s $OPENSHIFT_DATA_DIR/mysql_db_username ]; then
        OLD_USER=$(/bin/cat $OPENSHIFT_DATA_DIR/mysql_db_username)
    else
        OLD_USER="admin"
    fi

    # Prep the mysql database
    (
      /bin/zcat $OPENSHIFT_DATA_DIR/mysql_dump_snapshot.gz
      echo ";"
      echo "GRANT ALL ON *.* TO '$OPENSHIFT_MYSQL_DB_USERNAME'@'$NEW_IP' IDENTIFIED BY '$OPENSHIFT_MYSQL_DB_PASSWORD' WITH GRANT OPTION;"
      echo "GRANT ALL ON *.* TO '$OPENSHIFT_MYSQL_DB_USERNAME'@'localhost' IDENTIFIED BY '$OPENSHIFT_MYSQL_DB_PASSWORD' WITH GRANT OPTION;"
      
      if [ "$OPENSHIFT_MYSQL_DB_USERNAME" != "$OLD_USER" ]; then
          echo "DROP USER '$OLD_USER'@'localhost';"
      fi

      if [ "$OLD_IP" != "$NEW_IP" ]; then
          echo "DROP USER '$OLD_USER'@'$OLD_IP';"
      fi
      
      echo "FLUSH PRIVILEGES;"
    ) | /usr/bin/mysql -h $dbhost -P $OPENSHIFT_MYSQL_DB_PORT -u $OPENSHIFT_MYSQL_DB_USERNAME --password="$OPENSHIFT_MYSQL_DB_PASSWORD"

    if [ ! ${PIPESTATUS[1]} -eq 0 ]; then
        echo 1>&2
        echo "Error: Could not import MySQL Database!  Continuing..." 1>&2
        echo 1>&2
    fi

    cleanup_dump
  else
      echo "MySQL restore attempted but no dump found!" 1>&2
      echo "$OPENSHIFT_DATA_DIR/mysql_dump_snapshot.gz does not exist" 1>&2
  fi
}

function cleanup_dump {
  rm -f $OPENSHIFT_DATA_DIR/mysql_dump_snapshot.gz
  rm -f $OPENSHIFT_DATA_DIR/mysql_db_host
  rm -f $OPENSHIFT_DATA_DIR/mysql_db_username  
}

case "$1" in
  start)
    start
  ;;
  stop)
    stop
  ;;
  status)
    status
  ;;
  restart)
    stop
    start
  ;;
  pre-snapshot)
    pre_snapshot
  ;;
  post-snapshot)
    post_snapshot
  ;;
  pre-restore)
    pre_restore
  ;;
  post-restore)
    post_restore
  ;;
esac
