#!/bin/bash

source "/etc/openshift/node.conf"
source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/util
source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/git
COMMUNITY_POD_CART_NAME="community-pod-0.1"


#  Convert a git url into a pod name.
#  Eg. <path-to>/openshift-community-cartridge-mycart.git returns mycart
function convert_git_url_to_pod_name() {
   reponame=$(basename "$1")
   echo "${reponame%.*}"

}  #  End of function  convert_git_url_to_pod_name.


#  Log and send client error + exit.
function log_client_error_and_exit() {
   zmsg=${1:-"Internal error"}
   zcode=${2:-70}   #  Internal software error.
   if type client_error > /dev/null; then
      client_error  "$zmsg"
   fi

   error "$zmsg" $zcode

}  #  End of function  log_client_error_and_exit.


#  Download the community cartridge bits (beans).
function download_community_cartridge_bits() {
   git_url=$1
   download_dir=$2

   mkdir -p "$download_dir"

   #  Clone the external community cartridge into the cartridge instance dir.
   if ! git clone --no-hardlinks $git_url "$download_dir"; then
      errmsg="Unable to download community cartridge from: $git_url"
      log_client_error_and_exit "$errmsg" 66
   fi

}  #  End of function  download_community_cartridge_bits.


function get_community_cartridge_name() {
   pod_dir=$1
   pod_name=$2

   manifest="$pod_dir/$pod_name/metadata/manifest.yml"

   #  Use the name from the manifest.yml if it exists otherwise use the
   #  last "dashed" part of the pod name.
   if [ -f "$manifest" ]; then
      ccart_name=$(grep -e "^\s*Name:" "$manifest" | sed 's#^\s*Name:\s*##g')
   else
      ccart_name=${pod_name##*-}
   fi

   echo "$ccart_name"

}  #  End of function  get_community_cartridge_name.


function create_community_pod_cart_env_var() {
   envf=${APP_HOME:-$OPENSHIFT_HOMEDIR}/.env/OPENSHIFT_COMMUNITYPOD_CART
   echo "export OPENSHIFT_COMMUNITYPOD_CART='$1'" > "$envf"

}  #  End of function  create_community_pod_cart_env_var.


function setup_community_cartridge() {
   cart_name=$1
   download_dir=$2
   relative_download_path=$3

   zhomedir=${APP_HOME:-$OPENSHIFT_HOMEDIR}

   #  Sanitize cartridge name and make the cartridge directory.
   cartdir=$zhomedir/$(basename "$cart_name")
   mkdir -p  "$cartdir"


   #  Create the standard directories.
   pushd "$cartdir" > /dev/null
   create_standard_app_dirs
   mkdir -p .env logs
   for zdir in  bin lib metadata opt ; do
      if [ -d "$download_dir/$zdir" ]; then
         ln -sf "../$relative_download_path/$zdir" "$zdir"
      fi
   done
   popd > /dev/null

   #  Setup the mcs labels.
   observe_setup_var_lib_dir "$download_dir"
   observe_setup_var_lib_dir "$cartdir"

   #  Write env variables for the path and the cartridge name in this pod.
   #  Note: PATH is required to be set otherwise the setup 'hook' will fail.
   create_standard_path_env_var
   create_community_pod_cart_env_var "$cart_name"

}  #  End of function  setup_community_cartridge.


function clone_community_cartridge_git_repo() {
   cart_name=$1
   application=$2
   user_id=$3
   group_id=$4
   uuid=$5
   download_dir=$6
   desc="$cart_name community pod"

   #  If there's no template, use the community pod template.
   if [ ! -d "$download_dir/template" ]; then
      clone_git_repo "$application" "$user_id" "$group_id" "$uuid" "$desc"
      return $?
   fi

   #  Got a template, use that to create
   rm -rf  /tmp/git_template
   cp -r "$download_dir/template" /tmp/git_template/
   pushd /tmp/git_template > /dev/null
   git init
   git add -f .
   git config user.email "builder@example.com"
   git config user.name "Template builder"
   git commit -m 'Creating template'
   popd > /dev/null

   gdir="$download_dir/git_template.git"
   git clone --bare /tmp/git_template "$gdir"
   touch "$gdir/refs/heads/.gitignore"
   rm -rf /tmp/git_template

   clone_external_git_repo "$application" "$user_id" "$group_id" "$uuid"  \
                           "file://$gdir"

}  #  End of function  clone_community_cartridge_git_repo.


function unlock_cartridge_files() {
   cartdir=${APP_HOME:-$OPENSHIFT_HOMEDIR}/$(basename "${1:-".community"}")
   [ -d "$cartdir" ]  &&  chown $user_id.$group_id "$cartdir"
   [ -d "$cartdir/.env/" ]  &&  chown -R $user_id.$group_id "$cartdir/.env/"
   [ -d "$cartdir/opt/" ]  &&  chown $user_id.$group_id "$cartdir/opt/"

   #  TODO:  Process $cart_name/metadata/locked_files.txt

}  #  End of function  unlock_cartridge_files.


function lock_cartridge_files() {
   cartdir=${APP_HOME:-$OPENSHIFT_HOMEDIR}/$(basename "${1:-".community"}")
   [ -d "$cartdir" ]  &&  chown root.root "$cartdir"
   [ -d "$cartdir/.env/" ]  &&  chown -R root.root "$cartdir/.env/"
   [ -d "$cartdir/opt/" ]  &&  chown -R root.root "$cartdir/opt/"

   #  TODO:  Process $cart_name/metadata/locked_files.txt

   observe_setup_var_lib_dir "$cartdir"

}  #  End of function  lock_cartridge_files.



#
#  ========================================================================
#                     Externally used API functions
#  ========================================================================
#

#  Run a cartridge script as the gear user.
#  Parameters:  <cartridge-name>  <script>  <script-parameters>
#
function run_cartridge_script_as_user() {
   cart_name=$1
   script=$2
   args="${@:3}"

   zcmd="${APP_HOME:-$OPENSHIFT_HOMEDIR}/$cart_name/bin/$script"
   [ -f "$zcmd" ]  &&  run_as_user "$zcmd $args"

}  #  End of function  run_cartridge_script_as_user.


#  Download the cartridge bits (beans), mash 'em up + setup and install a
#  community cartridge.
#  Parameters: <pod-dir>  <app-name>  <user-id>  <group-id>  <uuid>  <git-url>
#     <pod-dir>:  Where the cartridge bits are to housed/installed to.
#    <app-name>:  Application name
#     <user-id>:  User name
#    <group-id>:  Group name
#        <uuid>:  Unix user id
#     <git-url>:  Upstream git url where community cartridge is located.
#
function install_community_pod_cartridge() {
   pod_dir=$1
   application=$2
   user_id=$3
   group_id=$4
   uuid=$5
   git_url=$6

   pod_name=$(convert_git_url_to_pod_name "$git_url")

   # Sanitize download directory and download community bits.
   pod_cart_dir=$(basename "$pod_name")
   download_dir=$pod_dir/$pod_cart_dir
   rel_download_path=$cartridge_type/$pod_cart_dir
   download_community_cartridge_bits "$git_url" "$download_dir"

   cart_name=$(get_community_cartridge_name "$pod_dir" "$pod_name")
   setup_community_cartridge "$cart_name" "$download_dir" "$rel_download_path"

   clone_community_cartridge_git_repo "$cart_name" "$application"  \
                  "$user_id" "$group_id" "$uuid" "$download_dir"

   #  This is sorta doing what we would w/ the new cartridge format.
   unlock_cartridge_files "$cart_name"

   run_cartridge_script_as_user "$cart_name" setup

   lock_cartridge_files "$cart_name"

   #  Reset cartridge type to the community cartridge name.
   cartridge_type=$cart_name

}  #  End of function  install_community_pod_cartridge.


function create_community_pod_network_env_vars() {
   INTERNAL_IP=$1
   INTERNAL_PORT=${2:-8080}

   zhomedir=${APP_HOME:-$OPENSHIFT_HOMEDIR}
   CART_NS=$(convert_cart_name_to_namespace_id "$COMMUNITY_POD_CART_NAME")

   echo "export OPENSHIFT_${CART_NS}_IP='$INTERNAL_IP'" > $zhomedir/.env/OPENSHIFT_${CART_NS}_IP
   echo "export OPENSHIFT_${CART_NS}_PORT='$INTERNAL_PORT'" > $zhomedir/.env/OPENSHIFT_${CART_NS}_PORT

}  #  End of function  create_community_pod_network_env_vars.


function remove_community_pod_cartridge() {
   cart_name=${OPENSHIFT_COMMUNITYPOD_CART:-".community"}

   run_cartridge_script_as_user "$cart_name" "control" "stop"

   #  This is sorta doing what we would w/ the new cartridge format.
   unlock_cartridge_files "$cart_name"

   run_cartridge_script_as_user "$cart_name" teardown

   lock_cartridge_files "$cart_name"

}  #  End of function  remove_community_pod_cartridge.


