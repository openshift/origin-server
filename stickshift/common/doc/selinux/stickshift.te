policy_module(stickshift, 1.0)

########################################
#
# Declarations
#

type mcollectived_t;
type mcollectived_exec_t;
init_daemon_domain(mcollectived_t, mcollectived_exec_t)
init_ranged_daemon_domain(mcollectived_t, mcollectived_exec_t, s0 - mcs_systemhigh)

type mcollectived_log_t;
logging_log_file(mcollectived_log_t)

type mcollectived_tmp_t;
files_tmp_file(mcollectived_tmp_t)

type mcollectived_var_run_t;
files_pid_file(mcollectived_var_run_t)

type mcollectived_lock_t;
files_lock_file(mcollectived_lock_t)

type stickshift_t;
type stickshift_exec_t;
application_domain(stickshift_t, stickshift_exec_t)
role system_r types stickshift_t;

type stickshift_tmp_t;
files_tmp_file(stickshift_tmp_t)

mcs_process_set_categories(stickshift_t)

type stickshift_file_t;
files_type(stickshift_file_t)

########################################
#
# mcollectived local policy
#
#permissive stickshift_t;
unconfined_domain(stickshift_t)

allow stickshift_t self:capability { setuid audit_write dac_override sys_nice chown fsetid setgid fowner sys_ptrace };
allow stickshift_t self:process { execmem getcap setpgid setsched signal_perms setexec setfscreate };
allow stickshift_t self:fifo_file rw_fifo_file_perms;
allow stickshift_t self:key write;
allow stickshift_t self:netlink_audit_socket { nlmsg_relay create };
allow stickshift_t self:sem create_sem_perms;
allow stickshift_t self:shm create_shm_perms;
allow stickshift_t self:tcp_socket create_stream_socket_perms;
allow stickshift_t self:udp_socket create_socket_perms;
allow stickshift_t self:unix_dgram_socket create_socket_perms;
allow stickshift_t self:unix_stream_socket { connectto create_stream_socket_perms};

kernel_read_kernel_sysctls(stickshift_t)
kernel_read_system_state(stickshift_t)

manage_dirs_pattern(stickshift_t, stickshift_tmp_t, stickshift_tmp_t)
manage_files_pattern(stickshift_t, stickshift_tmp_t, stickshift_tmp_t)
manage_sock_files_pattern(stickshift_t, stickshift_tmp_t, stickshift_tmp_t)
manage_lnk_files_pattern(stickshift_t, stickshift_tmp_t, stickshift_tmp_t)
files_tmp_filetrans(stickshift_t, stickshift_tmp_t, { file dir sock_file })
can_exec(stickshift_t, stickshift_tmp_t)

manage_files_pattern(stickshift_t, stickshift_file_t, stickshift_file_t)
manage_sock_files_pattern(stickshift_t, stickshift_file_t, stickshift_file_t)
manage_dirs_pattern(stickshift_t, stickshift_file_t, stickshift_file_t)
manage_lnk_files_pattern(stickshift_t, stickshift_file_t, stickshift_file_t)
can_exec(stickshift_t, stickshift_file_t)

corecmd_exec_bin(stickshift_t)
corecmd_exec_shell(stickshift_t)
corecmd_exec_all_executables(stickshift_t)

corenet_tcp_bind_all_ports(stickshift_t)
corenet_tcp_connect_all_ports(stickshift_t)

dev_read_kmsg(stickshift_t)
dev_read_rand(stickshift_t)
dev_read_raw_memory(stickshift_t)
dev_read_urand(stickshift_t)
dev_getattr_all_blk_files(stickshift_t)
dev_getattr_all_chr_files(stickshift_t)

term_getattr_all_ptys(stickshift_t)
term_getattr_all_ttys(stickshift_t)

domain_read_all_domains_state(stickshift_t)
domain_getattr_all_sockets(stickshift_t)
domain_getattr_all_pipes(stickshift_t)

files_getattr_all_sockets(stickshift_t)
files_getattr_all_files(stickshift_t)
files_getattr_all_pipes(stickshift_t)
files_read_etc_files(stickshift_t)
files_read_etc_runtime_files(stickshift_t)
files_read_usr_files(stickshift_t)
files_read_var_lib_files(stickshift_t)

application_exec_all(stickshift_t)

auth_use_nsswitch(stickshift_t)

logging_send_syslog_msg(stickshift_t)

init_stream_connect(stickshift_t)

miscfiles_read_localization(stickshift_t)
miscfiles_read_fonts(stickshift_t)

selinux_compute_access_vector(stickshift_t)

optional_policy(`
    abrt_stream_connect(stickshift_t)
')

ifdef(`colord_read_lib_files',`
    optional_policy(`
      colord_read_lib_files(stickshift_t)
    ')
')

optional_policy(`
    apache_exec_modules(stickshift_t)
    apache_list_modules(stickshift_t)
    apache_read_config(stickshift_t)
')

optional_policy(`
    cups_stream_connect(stickshift_t)
')

optional_policy(`
    dbus_system_bus_client(stickshift_t)
')

optional_policy(`
    mysql_read_config(stickshift_t)
')

optional_policy(`
    setroubleshoot_stream_connect(stickshift_t)
')

ifdef(`systemd_dbus_chat_logind',`
  optional_policy(`
    systemd_dbus_chat_logind(stickshift_t)
    systemd_write_inherited_logind_sessions_pipes(stickshift_t)
  ')
')

########################################
#
# stickshift local policy
#
permissive mcollectived_t;
allow mcollectived_t self:capability { chown dac_override fsetid kill };
allow mcollectived_t self:process { signal_perms setcap setexec };
allow mcollectived_t self:fifo_file rw_fifo_file_perms;
allow mcollectived_t self:unix_stream_socket { connectto create_stream_socket_perms };
allow mcollectived_t self:tcp_socket create_stream_socket_perms;
allow mcollectived_t self:udp_socket create_socket_perms;

#for testing
domtrans_pattern(unconfined_t, stickshift_exec_t, stickshift_t) 
allow unconfined_t stickshift_t:process { signull signal sigkill };

domtrans_pattern(mcollectived_t, stickshift_exec_t, stickshift_t) 
allow mcollectived_t stickshift_t:process { signull signal sigkill };

manage_dirs_pattern(mcollectived_t, stickshift_file_t, stickshift_file_t)
manage_files_pattern(mcollectived_t, stickshift_file_t, stickshift_file_t)
manage_lnk_files_pattern(mcollectived_t, stickshift_file_t, stickshift_file_t)
manage_sock_files_pattern(mcollectived_t, stickshift_file_t, stickshift_file_t)

manage_files_pattern(mcollectived_t, mcollectived_log_t, mcollectived_log_t)
manage_dirs_pattern(mcollectived_t, mcollectived_log_t, mcollectived_log_t)
manage_lnk_files_pattern(mcollectived_t, mcollectived_log_t, mcollectived_log_t)
logging_log_filetrans(mcollectived_t, mcollectived_log_t, { file dir })

manage_files_pattern(mcollectived_t, mcollectived_tmp_t, mcollectived_tmp_t)
manage_dirs_pattern(mcollectived_t, mcollectived_tmp_t, mcollectived_tmp_t)
manage_lnk_files_pattern(mcollectived_t, mcollectived_tmp_t, mcollectived_tmp_t)
files_tmp_filetrans(mcollectived_t, mcollectived_tmp_t, { file dir })

manage_files_pattern(mcollectived_t, mcollectived_lock_t, mcollectived_lock_t)
manage_dirs_pattern(mcollectived_t, mcollectived_lock_t, mcollectived_lock_t)
manage_lnk_files_pattern(mcollectived_t, mcollectived_lock_t, mcollectived_lock_t)
files_lock_filetrans(mcollectived_t, mcollectived_lock_t, { file dir })

manage_files_pattern(mcollectived_t, mcollectived_var_run_t, mcollectived_var_run_t)
manage_dirs_pattern(mcollectived_t, mcollectived_var_run_t, mcollectived_var_run_t)
manage_lnk_files_pattern(mcollectived_t, mcollectived_var_run_t, mcollectived_var_run_t)
files_pid_filetrans(mcollectived_t, mcollectived_var_run_t, { file dir })

kernel_getattr_message_if(stickshift_t)
kernel_read_network_state(stickshift_t)
kernel_read_software_raid_state(stickshift_t)
kernel_read_kernel_sysctls(mcollectived_t)
kernel_read_system_state(mcollectived_t)

corecmd_exec_bin(mcollectived_t)
corecmd_exec_shell(mcollectived_t)

corecmd_bin_entry_type(stickshift_t)

corenet_tcp_connect_amqp_port(mcollectived_t)

dev_read_urand(mcollectived_t)

domain_use_interactive_fds(mcollectived_t)

files_read_etc_files(mcollectived_t)
files_read_etc_runtime_files(mcollectived_t)

miscfiles_read_localization(mcollectived_t)

selinux_set_parameters(mcollectived_t)
selinux_validate_context(mcollectived_t)

usermanage_domtrans_useradd(mcollectived_t)

logging_send_syslog_msg(mcollectived_t)

sysnet_read_config(mcollectived_t)

domain_read_all_domains_state(mcollectived_t)

require {
    type useradd_t;
}

manage_dirs_pattern(useradd_t, stickshift_file_t, stickshift_file_t)
manage_files_pattern(useradd_t, stickshift_file_t, stickshift_file_t)
manage_lnk_files_pattern(useradd_t, stickshift_file_t, stickshift_file_t)

optional_policy(`
    gen_require(`
        type dontdoit_t;
        type httpd_passenger_helper_t;
            type http_cache_port_t;
        type httpd_t;
    ')

    allow httpd_passenger_helper_t self:capability dac_override;
    allow httpd_passenger_helper_t http_cache_port_t:tcp_socket name_connect;
    manage_dirs_pattern(httpd_t, stickshift_file_t, stickshift_file_t)
    manage_files_pattern(httpd_t, stickshift_file_t, stickshift_file_t)
    manage_lnk_files_pattern(httpd_t, stickshift_file_t, stickshift_file_t)
')

gen_require(`
    type sshd_t;
')
read_files_pattern(sshd_t, stickshift_file_t, stickshift_file_t)

#for proxy server to find applications to serve
gen_require(`
    type httpd_t;
    class dir search;
')

allow httpd_t stickshift_file_t:dir search;

#for ssh login
require {
    type unconfined_t;
    type stickshift_t;
    class process transition;
}

#============= unconfined_t ==============
allow unconfined_t stickshift_t:process transition;

#DHCP networking==========================
optional{
  require {
      type ephemeral_port_t;
      type dhcpc_t;
      class udp_socket name_bind;
  }
  
  allow dhcpc_t ephemeral_port_t:udp_socket name_bind;
}

#============= mcollectived_t ==============

require {
	type fs_t;
	type cert_t;
	type usr_t;
	type httpd_config_t;
	type mcollectived_t;
	type stickshift_file_t;
	type httpd_suexec_exec_t;
	type httpd_modules_t;
	type httpd_initrc_exec_t;
	type httpd_exec_t;
	type initrc_exec_t;
	type httpd_t;
	type httpd_var_run_t;
	class process { signal signull };
	class capability fowner;
	class file { execute read create ioctl execute_no_trans write getattr open };
	class filesystem getattr;
	class netlink_route_socket { bind create getattr nlmsg_read setopt };
	class lnk_file read;
	class dir { write getattr read search create open add_name };
	type mcollectived_t;
	type file_context_t;
	type usr_t;
	type gpg_exec_t;
	class key write;
	class process { setsched setfscreate };
	class capability { setuid sys_nice audit_write setgid };
	class file { read getattr execute open ioctl };
	class netlink_audit_socket { nlmsg_relay create };
	class lnk_file read;
	class dir search;
	type bin_t;
	type mysqld_etc_t;
	type mcollectived_t;
	type stickshift_t;
	type mysqld_exec_t;
	type hostname_exec_t;
	class unix_stream_socket connectto;
	class file { execute setattr read execute_no_trans getattr open };
	type mcollectived_t;
	type bin_t;
	class lnk_file { create unlink };
	class dir { setattr relabelfrom create write rmdir remove_name relabelto add_name };
	class file { rename relabelfrom create write link relabelto unlink append };
	class process execmem;
	class tcp_socket name_connect;
	class dir { write remove_name add_name };
	class file { write create unlink };
	type java_exec_t;
	type ssh_keygen_exec_t;
	type bin_t;
	type cert_t;
	type ifconfig_exec_t;
	type proc_net_t;
	type random_device_t;
	type consoletype_exec_t;
	class lnk_file { read setattr };
	class chr_file { read open };
	class file { execute read lock create execute_no_trans write getattr unlink open relabelfrom relabelto };
	class dir { write read add_name remove_name };
	type http_port_t;
	class tcp_socket name_connect;
	type mcollectived_t;
	type lib_t;
	type root_t;
	class dir create;
	class file { rename setattr };
	type var_lock_t;
	class process transition;
        type tmpfs_t;
	type http_cache_port_t;
	type mcollectived_t;
	type node_t;
	type initrc_var_run_t;
	type initrc_t;
	type var_lib_t;
	class process { signal setrlimit };
	class capability { sys_chroot sys_resource };
	class tcp_socket { name_bind name_connect node_bind };
	class file { read unlink open };
	class sock_file { rename create unlink link };
	class dir { write remove_name add_name };
	type httpd_log_t;
	type httpd_var_run_t;
	type mcollectived_t;
	type http_port_t;
	type mcollectived_tmp_t;
	class process setpgid;
	class capability net_bind_service;
	class tcp_socket name_bind;
	class file { write create open };
	class sock_file { write create unlink setattr };
	class sem { write read create unix_write setattr };
	class lnk_file read;
	class dir { write add_name };
	type mcollectived_t;
	class process getpgid;
	class sem destroy;
	type qpidd_t;
 }

# missing in RHEL 6.3's policy
optional {
  require {
     type unreserved_port_t;
     type ephemeral_port_t;
  }
  allow mcollectived_t ephemeral_port_t:tcp_socket name_bind;
  allow mcollectived_t unreserved_port_t:tcp_socket name_bind;
}

#============= mcollectived_t ==============
allow mcollectived_t stickshift_t:process transition;
allow mcollectived_t var_lock_t:file { read write open lock };
allow mcollectived_t stickshift_file_t:file { relabelfrom relabelto };

optional{
  require {
  	type httpd_passwd_exec_t;
  }
  allow mcollectived_t httpd_passwd_exec_t:file getattr;
}

#qpid
allow qpidd_t proc_net_t:file read;

#stickshift-proxy
allow mcollectived_t ifconfig_exec_t:file { read execute open execute_no_trans };
allow mcollectived_t proc_net_t:file { read getattr open };
allow mcollectived_t http_port_t:tcp_socket name_connect;

#jenkins
allow mcollectived_t java_exec_t:file { read execute open execute_no_trans };
allow mcollectived_t random_device_t:chr_file { read open };
allow mcollectived_t ssh_keygen_exec_t:file { read execute open execute_no_trans };

#runcon
allow initrc_t stickshift_t:process transition;

#Allow cartridges to write http proxy configs and restart http as mcollecitve
allow mcollectived_t cert_t:file getattr;
allow mcollectived_t fs_t:filesystem getattr;
allow mcollectived_t tmpfs_t:filesystem getattr;
allow mcollectived_t httpd_config_t:dir { write getattr read create open add_name };
allow mcollectived_t httpd_config_t:file { write read create open getattr };
allow mcollectived_t httpd_config_t:lnk_file read;
allow mcollectived_t httpd_exec_t:file { read execute open execute_no_trans };
allow mcollectived_t httpd_initrc_exec_t:file { ioctl execute read open getattr execute_no_trans };
allow mcollectived_t httpd_modules_t:dir search;
allow mcollectived_t httpd_modules_t:file { read getattr open execute };
allow mcollectived_t httpd_modules_t:lnk_file read;
allow mcollectived_t httpd_suexec_exec_t:file { read getattr execute };
allow mcollectived_t httpd_t:process { signal signull };
allow mcollectived_t httpd_var_run_t:dir search;
allow mcollectived_t httpd_var_run_t:file { read open };
allow mcollectived_t initrc_exec_t:file { ioctl execute read open getattr execute_no_trans };
allow mcollectived_t self:capability fowner;
allow mcollectived_t self:netlink_route_socket { bind create getattr nlmsg_read setopt };
allow mcollectived_t stickshift_file_t:file execute;
allow mcollectived_t httpd_config_t:dir { remove_name rmdir };
allow mcollectived_t httpd_config_t:file unlink;

#lookup file contexts
allow mcollectived_t file_context_t:dir search;
allow mcollectived_t file_context_t:file { read getattr open };

#runuser
allow mcollectived_t gpg_exec_t:file execute;
allow mcollectived_t self:capability { setuid sys_nice setgid audit_write };
allow mcollectived_t self:key write;
allow mcollectived_t self:netlink_audit_socket { nlmsg_relay create };

#renice
allow mcollectived_t self:process { setsched setfscreate };

#mysql
require {
	type mysqld_t;
	type anon_inodefs_t;
	type stickshift_file_t;
	class dir { write search read remove_name open getattr add_name };
	class file { read create write getattr unlink open };
}
allow mcollectived_t bin_t:file setattr;
allow mcollectived_t hostname_exec_t:file { read getattr open execute execute_no_trans };
allow mcollectived_t mysqld_etc_t:file { read getattr open };
allow mcollectived_t mysqld_exec_t:file { read execute open execute_no_trans };
allow mcollectived_t stickshift_t:unix_stream_socket connectto;
allow mysqld_t anon_inodefs_t:file { read write };
allow mysqld_t stickshift_file_t:dir { write search read remove_name open getattr add_name };
allow mysqld_t stickshift_file_t:file { write getattr read create unlink open };

#mongo
optional{
  require {
    type mongod_port_t;
  }
  allow mcollectived_t mongod_port_t:tcp_socket name_connect;
}
allow mcollectived_t self:process execmem;

#misc
allow mcollectived_t usr_t:file { read getattr open };
allow mcollectived_t usr_t:file ioctl;
allow mcollectived_t usr_t:lnk_file read;
allow mcollectived_t cert_t:file { write read lock create unlink open };
allow mcollectived_t cert_t:lnk_file read;
allow mcollectived_t consoletype_exec_t:file { read execute open execute_no_trans };
allow mcollectived_t bin_t:lnk_file setattr;
allow mcollectived_t cert_t:dir { write read add_name remove_name };

#jboss
allow mcollectived_t bin_t:dir { setattr relabelfrom create write rmdir relabelto remove_name add_name };
allow mcollectived_t bin_t:file { rename relabelfrom create write link relabelto unlink append };
allow mcollectived_t bin_t:lnk_file { create unlink };

#python executed when setting up nodejs
allow mcollectived_t lib_t:dir { write remove_name add_name };
allow mcollectived_t lib_t:file { write create unlink };

#python
allow mcollectived_t lib_t:dir create;
allow mcollectived_t lib_t:file { rename setattr };
allow mcollectived_t root_t:dir create;

#haproxy
allow mcollectived_t http_cache_port_t:tcp_socket name_connect;
allow mcollectived_t initrc_t:process signal;
allow mcollectived_t initrc_var_run_t:file { read unlink open };
allow mcollectived_t node_t:tcp_socket node_bind;
allow mcollectived_t self:capability { sys_chroot sys_resource };
allow mcollectived_t self:process setrlimit;
allow mcollectived_t var_lib_t:dir { write remove_name add_name };
allow mcollectived_t var_lib_t:sock_file { rename create unlink link };
allow mcollectived_t http_port_t:tcp_socket name_bind;
allow mcollectived_t httpd_log_t:dir { write add_name };
allow mcollectived_t httpd_log_t:file { create open };
allow mcollectived_t httpd_log_t:lnk_file read;
allow mcollectived_t httpd_var_run_t:dir { write add_name };
allow mcollectived_t httpd_var_run_t:file { write create };
allow mcollectived_t mcollectived_tmp_t:sock_file { write create unlink setattr };
allow mcollectived_t self:capability net_bind_service;
allow mcollectived_t self:process setpgid;
allow mcollectived_t self:sem { write read create unix_write setattr };
allow mcollectived_t self:process getpgid;
allow mcollectived_t self:sem destroy;
# missing in RHEL 6.3's policy
ifdef(`unreserved_port_t',`
  allow mcollectived_t unreserved_port_t:tcp_socket name_bind;
')
ifdef(`ephemeral_port_t',`
  allow mcollectived_t ephemeral_port_t:tcp_socket name_bind;
')

#============ dont audits ================

require {
	type proc_mdstat_t;
	type configfs_t;
	type mtrr_device_t;
	type krb5_conf_t;
	type stickshift_file_t;
	type pulseaudio_home_t;
	type mcollectived_t;
	type root_t;
	type sysctl_net_t;
	type http_port_t;
	type proc_kmsg_t;
	class capability sys_ptrace;
	class tcp_socket name_connect;
	class lnk_file read;
	class dir { getattr search setattr };
	class file { read getattr open create };
}

#============= mcollectived_t ==============
dontaudit mcollectived_t configfs_t:dir getattr;
dontaudit mcollectived_t http_port_t:tcp_socket name_connect;
dontaudit mcollectived_t krb5_conf_t:file { read open };
dontaudit mcollectived_t mtrr_device_t:file getattr;
dontaudit mcollectived_t proc_kmsg_t:file getattr;
dontaudit mcollectived_t proc_mdstat_t:file getattr;
dontaudit mcollectived_t pulseaudio_home_t:lnk_file read;
dontaudit mcollectived_t root_t:dir setattr;
dontaudit mcollectived_t self:capability sys_ptrace;
dontaudit mcollectived_t stickshift_file_t:file create;
dontaudit mcollectived_t sysctl_net_t:dir search;

domain_dontaudit_getattr_all_sockets(mcollectived_t)
domain_dontaudit_getattr_all_pipes(mcollectived_t)
files_dontaudit_getattr_all_sockets(mcollectived_t)
files_dontaudit_getattr_all_files(mcollectived_t)
files_dontaudit_getattr_all_pipes(mcollectived_t)
dev_dontaudit_getattr_all_blk_files(mcollectived_t)
dev_dontaudit_getattr_all_chr_files(mcollectived_t)
files_dontaudit_search_all_dirs(mcollectived_t)

domain_dontaudit_read_all_domains_state(httpd_t)
