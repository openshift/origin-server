#!/bin/bash

[ ! -z "$SS_CONTROLLER_LIB_UTIL" ] && return 0
SS_CONTROLLER_LIB_UTIL=true
source /etc/stickshift/stickshift-node.conf

function source_if_exists {
    [ -f "$1" ]  &&  source "$1"
    return 0
}

# Public: Start all processes in a given gear
#
# Examples:
#   start_app
#   # => 0
#
# Returns 0 on success
function start_app {
    for env_var in  $APP_HOME/.env/*_CTL_SCRIPT
    do
        . $env_var
    done

    set_app_state started

    for cmd in `awk 'BEGIN {
                            for (a in ENVIRON)
                            if (a ~ /DB_CTL_SCRIPT$/)
                            print ENVIRON[a] }'`
    do
        run_as_user "$cmd start" || error "Failed to start ${cmd}" 121
    done
    for cmd in `awk 'BEGIN {
                            for (a in ENVIRON)
                                if ((a ~ /_CTL_SCRIPT$/) &&
                                    !(a ~ /DB_CTL_SCRIPT$/) &&
                                    (a != "OPENSHIFT_GEAR_CTL_SCRIPT"))
                                        print ENVIRON[a] }'`
    do
        run_as_user "$cmd start" || error "Failed to start ${cmd}" 121
    done
    for cmd in `awk 'BEGIN {
                        for (a in ENVIRON)
                            if (a == "OPENSHIFT_GEAR_CTL_SCRIPT")
                                print ENVIRON[a] }'`
    do
        run_as_user "$cmd start" || error "Failed to start ${cmd}" 121
    done
}

function stop_app {
    for env_var in  $APP_HOME/.env/*_CTL_SCRIPT
    do
        . $env_var
    done

    set_app_state stopped

    for cmd in `awk 'BEGIN {
                        for (a in ENVIRON)
                            if (a == "OPENSHIFT_GEAR_CTL_SCRIPT")
                                print ENVIRON[a] }'`
    do
        run_as_user "$cmd stop" || echo "Failed to stop ${cmd}" 1>&2
    done
    for cmd in `awk 'BEGIN {
                        for (a in ENVIRON)
                        if ((a ~ /_CTL_SCRIPT$/) &&
                            !(a ~ /DB_CTL_SCRIPT$/) &&
                            (a != "OPENSHIFT_GEAR_CTL_SCRIPT"))
                                print ENVIRON[a] }'`
    do
        run_as_user "$cmd stop" || echo "Failed to stop ${cmd}" 1>&2
    done
    for cmd in `awk 'BEGIN {
                            for (a in ENVIRON)
                                if (a ~ /DB_CTL_SCRIPT$/)
                                    print ENVIRON[a] }'`
    do
        run_as_user "$cmd stop" || echo "Failed to stop ${cmd}" 1>&2
    done
}

function start_dbs {
    for cmd in `awk 'BEGIN {
                        for (a in ENVIRON)
                        if (a ~ /DB_CTL_SCRIPT$/)
                            print ENVIRON[a] }'`
    do
        $cmd start || error "Failed to start ${cmd}" 121
    done
}

function source_if_exists {
    [ -f "$1" ]  &&  source "$1"
    return 0
}

function get_cartridge_instance_dir {
    carttype=${1:-$cartridge_type}
    if [ -n "$carttype" ]; then
        echo "$APP_HOME/$carttype"
    else
        error "${application}. Cartridge type '$carttype' not set." 142
    fi
}

function is_a_scalable_app {
    source /etc/stickshift/stickshift-node.conf
    source_if_exists "${GEAR_BASE_DIR}/$uuid/.env/OPENSHIFT_APP_NAME"
    source_if_exists "${GEAR_BASE_DIR}/$uuid/.env/OPENSHIFT_GEAR_TYPE"

    # FIXME: Need better mechanism to evaluate if the app is scalable or not.
    [ "haproxy-1.4" = "$OPENSHIFT_GEAR_TYPE" ]   &&  return 0
    [ "$application" != "$OPENSHIFT_APP_NAME" ]  &&  return 0
    return 1
}

function create_env_uservars_dir {
    mkdir -p "$APP_HOME/.env/.uservars"
    chmod 755 "$APP_HOME/.env/.uservars"
}

function create_env_uservars_script {
    cat <<EOF > "$APP_HOME/.env/USER_VARS"
#!/bin/bash -e

# Setup user Environment Variables
for f in \$(ls $APP_HOME/.env/.uservars/); do
    n=\$(echo "\$f" | sed 's/[^A-Za-z0-9_]/_/g')
    export \$n=\$(cat "$APP_HOME/.env/.uservars/\$f")
done

EOF

}

function create_standard_env_vars {
    echo "export OPENSHIFT_LOG_DIR='$APP_DIR/logs/'" > \
                                      $APP_HOME/.env/OPENSHIFT_LOG_DIR
    echo "export OPENSHIFT_RUN_DIR='$APP_DIR/run/'" > \
                                      $APP_HOME/.env/OPENSHIFT_RUN_DIR
    echo "export OPENSHIFT_GEAR_TYPE='$cartridge_type'" > \
                                      $APP_HOME/.env/OPENSHIFT_GEAR_TYPE
    echo "export OPENSHIFT_RUNTIME_DIR='$APP_DIR/runtime/'" > \
                                      $APP_HOME/.env/OPENSHIFT_RUNTIME_DIR
}

function create_standard_env_uservars {
    create_env_uservars_dir
    create_env_uservars_script
}

function create_standard_network_env_vars {
    cinstancedir=$(get_cartridge_instance_dir)
    echo "export OPENSHIFT_INTERNAL_IP='$IP'" > $APP_HOME/.env/OPENSHIFT_INTERNAL_IP
    echo "export OPENSHIFT_INTERNAL_PORT='8080'" > $APP_HOME/.env/OPENSHIFT_INTERNAL_PORT
    echo "export OPENSHIFT_GEAR_CTL_SCRIPT='$cinstancedir/${application}_ctl.sh'" > $APP_HOME/.env/OPENSHIFT_GEAR_CTL_SCRIPT
}

function create_standard_repo_dir_env_var {
    # see model/unix_user.rb
    true
}

function create_standard_path_env_var {
    echo "export PATH=$CART_INFO_DIR/bin/:$CARTRIDGE_BASE_PATH/abstract-httpd/info/bin/:$CARTRIDGE_BASE_PATH/abstract/info/bin/:$PATH" > $APP_HOME/.env/PATH
}

function create_custom_uservars_var {
    echo "$2" > "$APP_HOME/.env/.uservars/$1"
}

#example usage: sed -i $(getSedExpression_replaceEnvVariables) path/to/file.conf
function getSedExpression_replaceEnvVariables {
        pathToEnvFolder="${OPENSHIFT_HOMEDIR}.env"

        variableFiles=`find ${pathToEnvFolder} -type f -print`

        sedCmd=""

        for variableFile in $variableFiles
        do
                arrVarFile=(`echo $variableFile | tr "/" "\n"`)
                arrSize=${#arrVarFile[@]}
                #use file name as variable name
                variableName=${arrVarFile[$arrSize - 1]}
                variableVal=(`echo ${!variableName//\//\\\/}`)

                sedCmd="${sedCmd} -e s/\${env.${variableName}}/${variableVal}/g"
        done
        
        printf "%s\n" "$sedCmd"
}

function create_standard_app_dirs {
    mkdir -p run tmp ci
    [ -e repo ] || ln -s ../app-root/repo repo
    [ -e data ] || ln -s ../app-root/data data
    [ -e runtime ] || ln -s ../app-root/runtime runtime
}

function create_cartridge_instance_dir {
    carttype=${1:-$cartridge_type}
    if [ -n "$carttype" ]; then
        mkdir -p "$APP_HOME/$carttype"
    else
        error "${application}. Cartridge type '$carttype' not set." 141
    fi
}

function create_app_dir_symlink {
    ln -s "$1" "$APP_DIR"
}

# Create simple application start / stop script
function create_app_ctl_script {
    rm -f "$APP_DIR/${application}_ctl.sh"
    
    cat <<EOF >> "$APP_DIR/${application}_ctl.sh"
#!/bin/bash -e

EOF
    
    if [ "$1" ]; then
        cat <<EOF >> "$APP_DIR/${application}_ctl.sh"
# Expose which cartridge created the ctl script
export CARTRIDGE_TYPE="$1"

EOF
    fi


    cat <<EOF >> "$APP_DIR/${application}_ctl.sh"
# Import Environment Variables
for f in ~/.env/*
do
    . \$f
done

app_ctl.sh \$1
EOF

    chmod +x "$APP_DIR/${application}_ctl.sh" || \
        error "Failed to chmod new application scripts" 122

}

function secure_app_dir {
    # set ownership for all the sub-directories even with dot names to User
    chown -R $user_id.$group_id "$APP_HOME/app-root" || \
        error "Failed to chown new application space." 123

    # reserve ownership of app-root for OpenShift
    chown root.$group_id "$APP_HOME/app-root" || \
        error "Failed to chown new application root." 123

    chown root.root "$APP_DIR"
}

function secure_cart_instance_dir {
    cinstancedir=$(get_cartridge_instance_dir)
    chown $user_id.$group_id -R "$cinstancedir" || \
        error "Failed to chown new application space." 123
    chown root.root "$cinstancedir"
    if [ -f "$cinstancedir/${application}_ctl.sh" ]
    then
      chown root.root "$cinstancedir/${application}_ctl.sh"
    fi
}

function secure_conf_dirs {
    cinstancedir=$(get_cartridge_instance_dir)
    chown root:root -R "$cinstancedir/conf" "$cinstancedir/conf.d"
}

function check_cartridge_dir_doesnt_exist {
    if [ -d "$APP_HOME/$cartridge_type" ]; then
        error "${application}. Cartridge directory $APP_HOME/$cartridge_type already exists." 132
    fi
}

function check_app_dir_exists {
    if [ ! -d "$APP_HOME/app-root" ]
    then
        error "${application}.  Application directory doesn't exist:  $APP_HOME/app-root" 125
    fi
}

function rm_app_dir {
    runcon -l s0-s0:c0.c1023 rm -rf "$APP_DIR" "$APP_HOME/app-root"
}

function rm_cartridge_instance_dir {
    ctype=${1:-$cartridge_type}
    [ -n "$ctype" ]  &&  runcon -l s0-s0:c0.c1023 rm -rf "$APP_HOME/$ctype"
}

function load_resource_limits_conf {
    if [ -f '/etc/stickshift/resource_limits.conf' ]
    then
        . /etc/stickshift/resource_limits.conf
    fi
}

function generate_password {
    head -n 500 /dev/urandom|tr -dc "a-np-zA-NP-Z1-9-_"|fold -w 12 | head -n1
}

function error {
    echo "$1" 1>&2
    exit "$2"
}

function warning {
    echo "$1" 1>&2
    #echo "$2"
}

function client_result {
    echo "CLIENT_RESULT: $1"
}

function client_message {
    echo "CLIENT_MESSAGE: $1"
}

function client_error {
    echo "CLIENT_ERROR: $1"
}

function client_debug {
    echo "CLIENT_DEBUG: $1"
}

function set_app_info {
    echo "APP_INFO: $1"
}

function send_attr {
    echo "ATTR: $1"
}

function add_ssh_key {
    echo "SSH_KEY_ADD: $1"
}

function remove_ssh_key {
    echo "SSH_KEY_REMOVE: "
}

function add_env_var {
    echo "ENV_VAR_ADD: $1"
}

function remove_env_var {
    echo "ENV_VAR_REMOVE: $1"
}

function add_broker_auth_key {
    echo "BROKER_AUTH_KEY_ADD: "
}

function remove_broker_auth_key {
    echo "BROKER_AUTH_KEY_REMOVE: "
}

function cart_data {
    echo "CART_DATA: $@"
}

function cart_props {
    echo "CART_PROPERTIES: $@"
}

function setup_configure {
    source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/git
    source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/network
    source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/apache
	
    CART_INFO_DIR=$CARTRIDGE_BASE_PATH/$cartridge_type/info
    CART_CONF_DIR=$CART_INFO_DIR/configuration/etc/conf

    load_resource_limits_conf

    application="$1"
    namespace=`basename $2`
    uuid=$3
    git_url=$4

    setup_app_dir_vars
    setup_user_vars

    #
    # Get user id info
    # Not caching this information caused some early chowns to work but some later
    # chowns to fail with a user not found error
    user_id=$(id -u "$uuid") || error "Could not find user $uuid ($namespace)" 134
    group_id=$(id -g "$uuid") || error "Could not find user $uuid ($namespace)" 135
}

function setup_deconfigure {
    source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/git
    source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/network
    source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/apache

    namespace=`basename $2`
    application="$1"
    uuid=$3

    setup_app_dir_vars
    setup_user_vars
}

function setup_embedded_configure {
    source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/network
    source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/apache

    CART_INFO_DIR=$CARTRIDGE_BASE_PATH/embedded/$cartridge_type/info
    CART_ETC_DIR=$CART_INFO_DIR/configuration/etc
    CART_CONF_DIR=$CART_INFO_DIR/configuration/etc/conf

    load_resource_limits_conf

    application="$1"
    namespace=$2
    uuid=$3

    setup_basic_vars

    user_id=$(id -u "$uuid") || error "Could not find user $uuid" 134
    group_id=$(id -g "$uuid") || error "Could not find user $uuid" 135
}

function setup_embedded_deconfigure {
    source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/network
    source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/apache

    CART_INFO_DIR=$CARTRIDGE_BASE_PATH/embedded/$cartridge_type/info

    application="$1"
    namespace=$2
    uuid=$3

    setup_basic_vars
}

function setup_basic_hook {
    uuid=`basename $3`
    namespace="$2"
    application="$1"
    
    setup_basic_vars
}

function setup_basic_vars {
    setup_app_dir_vars
    check_app_dir_exists
    setup_user_vars
}

function setup_app_dir_vars {
    APP_HOME="$GEAR_BASE_DIR/$uuid/"
    APP_DIR=`echo $APP_HOME/$application | tr -s /`
    APP_REPO_DIR="$APP_HOME/app-root/repo"
    APP_DATA_DIR="$APP_HOME/app-root/data"
}

function force_kill {
    pid=$1
    for i in {1..12}
    do
        if ! /bin/kill -0 $pid > /dev/null 2>&1
        then
            echo "Waiting for stop to finish"
            sleep .2
            if [ $i -gt 9 ]
            then
                /bin/kill -9 $pid
            fi
        else
            break
        fi
    done
}

function confirm_log_files_inactive {
    log_dir="$1"
    for LOGFILE in `find $log_dir -type f`
    do
      for PID in `/usr/sbin/lsof -t $LOGFILE`
      do
        /bin/kill -9 $PID
      done
    done
}

function confirm_pid_gone {
    pid_file="$1"
    i=0
    while [ -f $pid_file ] && [ $i -lt 30 ]
    do
        sleep .2
        i=$(($i + 1))
    done
}

function wait_for_stop {
	pid=$1
    for i in {1..60}
    do
        if `ps --pid $pid > /dev/null 2>&1`
        then
            echo "Waiting for stop to finish"
            sleep .5
        else
            break
        fi
    done
}

function import_env_vars {
    for f in $APP_HOME/.env/*
    do
        . $f
    done
}

function translate_env_vars {
  xlations=( $(echo $TRANSLATE_GEAR_VARS) )
  i=0
  while [ "${xlations[$i]}" ]
  do
    keyname="${xlations[$i]}"
    i=$(( $i + 1 ))
    valref="${xlations[$i]}"
    i=$(( $i + 1 ))
    keyprev=$(eval "echo \$$keyname")
    if [ "$keyname" ] && [ "$valref" ] && [ -z "$keyprev" ]
    then
      eval "export ${keyname}=\"\$${valref}\""
    fi
  done
}

function print_all_running_processes {
    echo ""
    echo "Running Processes:"
    echo ""
    ps -eFCvx
    echo ""
}

function print_user_running_processes {
    myuserid=$1
    echo ""
    echo "Running Processes:"
    echo ""
    ps -FCvx -U ${myuserid}
    echo ""
}

function rm_unobfuscated_app_home {
    # Check if unobfuscate is set in /etc/stickshift/stickshift-node.conf
    # If it is set, remove symlink

    namespace=$1
    appname=$2

    if [ $CREATE_APP_SYMLINKS -eq 1 ]
    then
        rm -f "${GEAR_BASE_DIR}/${appname}-${namespace}"
    fi
}

function unobfuscate_app_home {
    # Check if unobfuscate is set in /etc/stickshift/stickshift-node.conf
    # If it is set, symlink /var/lib/stickshift/uuid to /var/lib/stickshift/appname-namespace
    # This will allow easier debugging.

    uuid=$1
    namespace=$2
    appname=$3

    if [ $CREATE_APP_SYMLINKS -eq 1 ]
    then
        if [ ! -f "${GEAR_BASE_DIR}/$appname-$namespace" ] && [ ! -d "${GEAR_BASE_DIR}/$appname-$namespace" ]
        then
            /bin/ln -sf "${GEAR_BASE_DIR}/${uuid}" "${GEAR_BASE_DIR}/${appname}-${namespace}"
        fi
    fi
}

function send_stopped_status {
    _state=`get_app_state`

    case "$_state" in
      idle)     send_attr "status=ALREADY_IDLED" ;;
      stopped)  send_attr "status=ALREADY_STOPPED" ;;
      *)
          if [ -f $APP_DIR/run/stop_lock ]
          then
              HTTP_DIR=`dirname "/etc/httpd/conf.d/stickshift/${uuid}"*/00000_default.conf`
              if [ -f $HTTP_DIR/0000000000000_disabled.conf ]
              then
                  send_attr "status=ALREADY_IDLED"
              else
                  send_attr "status=ALREADY_STOPPED"
              fi
          fi
          ;;
    esac
}

function send_quotas {
    q=`quota -w -u ${uuid} | tail -n1`
    quota_blocks=`echo $q | gawk '{print $4}'`
    send_attr "quota_blocks=$quota_blocks"
    quota_files=`echo $q | gawk '{print $7}'`
    send_attr "quota_files=$quota_files"
}

function status_client_result {
    output=$1
    IFS_BAK=$IFS
IFS="
"
    for line in $output
    do
        client_result "$line"
    done
    IFS=$IFS_BAK
}

function observe_setup_app_and_git_dirs {
    observe_setup_var_lib_dir "$APP_HOME/git/"
    observe_setup_var_lib_dir "$APP_HOME/app-root/"
    observe_setup_var_lib_dir "$APP_DIR"
}

function observe_setup_cart_instance_dir {
    observe_setup_var_lib_dir "$(get_cartridge_instance_dir)"
}

function observe_setup_env_uservars_dir {
    observe_setup_var_lib_dir "$APP_HOME/.env/.uservars"
}

function setup_user_vars {
    uid=$(id -u "$uuid")
}

function observe_setup_app_home {
    return 0
}

function observe_setup_var_lib_dir {
    return 0
}

function observe_setup_var_lib_file {
    return 0
}

function run_as_user {
    _uuid=${uuid:-$OPENSHIFT_GEAR_UUID}

    if [ "`whoami`" = "$_uuid" ]; then
        eval $1
    else
      runuser --shell /bin/sh "$_uuid" -c "$1"
    fi
}

function super_run_as_user {
    /bin/su -s /bin/sh "$uuid" -c "$1"
}

function daemon_as_user {
    daemon --user="$uuid" "$@"
}

function validate_run_as_user {
    uuid=$OPENSHIFT_GEAR_UUID
    setup_user_vars

    if whoami | grep -q root
    then
        echo 1>&2
        echo "Please run script as the correct user, try:" 1>&2
        echo "run_as_user \"<command>\"" 1>&2
        echo 2>&1
        exit 15
    fi
}

function openshift_state_dir {
  echo "${APP_HOME:-$OPENSHIFT_HOMEDIR}/app-root/runtime"
}

function get_app_state {
  get_cartridge_state `openshift_state_dir`
}

function get_cartridge_state {
  _state_file="$1/.state"
  if [ -f "$_state_file" ]; then
    cat "$_state_file"
  else
    echo unknown
  fi
}

# expected values: building, deploying, started, idle, new, stopped, or unknown
function set_app_state {
  set_cartridge_state `openshift_state_dir` $1
}

function set_cartridge_state {
  _state=`get_cartridge_state "$1"`
  if [ ! \( "idle" = "$_state" -a "stopped" = "$2" \) ]; then
    _state_file="$1/.state"
    run_as_user "echo \"$2\" >$_state_file"
  fi  
}

function test_app_state {
  _state=`get_app_state`
  return `test "$_state" = "$1"`
}

function test_cartridge_state {
  _state=`get_cartridge_state "$1"`
  return `test "$_state" = $2`
}

function src_user_hook {
    # Run pre_start, pre_stop, post_start, post_stop hooks.
    # The pre_* hooks may modify environment.
    local hook="${OPENSHIFT_REPO_DIR}.openshift/action_hooks/$1"
    shift

    if [ $(id -u) -eq 0 ]; then
        echo "ERROR: src_user_hook called as root" 1>&2
        exit 15
    fi

    if [ -f "$hook" ]; then
        source "$hook" "$@"
    fi
}


function run_user_hook {
    # Run pre_start, pre_stop, post_start, post_stop hooks.
    # The pre_* hooks may modify environment.
    local hook="${OPENSHIFT_REPO_DIR}.openshift/action_hooks/$1"
    shift

    if [ $(id -u) -eq 0 ]; then
        echo "ERROR: run_user_hook called as root" 1>&2
        exit 15
    fi

    if [ -f "$hook" ]; then
        "$hook" "$@"
    fi
}

function enable_cgroups {
    return 0
}

function disable_cgroups {
    return 0
}

function resolve_application_dependencies {
    uuid=$1
    application=$2

    for env_var in ${GEAR_BASE_DIR}/${uuid}/.env/*
    do
        . $env_var
    done

    pushd "${GEAR_BASE_DIR}/${uuid}/git/$application.git"
    super_run_as_user "${GEAR_BASE_DIR}/${uuid}/git/$application.git/hooks/pre-receive 2>&1 | tee /dev/null"
    super_run_as_user "${GEAR_BASE_DIR}/${uuid}/git/$application.git/hooks/post-receive 2>&1 | tee /dev/null"
    popd
}

# Checks for the presence of the user-specified hot_deploy marker in the app
# repo. Returns 0 if the marker is present, otherwise 1.
function hot_deploy_marker_is_present {
  if [ -f "${OPENSHIFT_REPO_DIR}/.openshift/markers/hot_deploy" ]; then
    return 0
  else
    return 1
  fi
}

# Checks for the CI_BUILD variable. Returns 0 if the variable is not empty,
# otherwise 1. This is used to provide scripts with information about the
# build context (e.g., are we currently executing in a Jenkins build).
function in_ci_build {
  if [ -z "$CI_BUILD" ]; then
    return 1
  else
    return 0
  fi
}

if [ -f /usr/libexec/stickshift/lib/util_ext ]
then
    source /usr/libexec/stickshift/lib/util_ext
fi
# DON'T PUT ANYTHING BELOW UTIL_EXT CHECK
