#!/bin/env ruby

require 'rubygems'
require 'open4'
require 'thread'

HTTPD_SYSTEM="/sbin/service httpd"
HTTPD_CMDS=["graceful", "restart"]
HTTPD_PRE_CMDS=["configtest"]
LOCKFILE="/tmp/httpd_singular.lock"

def single_instance(&block)
  File.open(LOCKFILE, File::CREAT|File::TRUNC|File::RDWR, 0640) do |f|
    begin
      f.flock(File::LOCK_EX)
      block.call
    ensure
      f.flock(File::LOCK_UN)
    end
  end
end

 
def async_cat(infd, outfd)
  th = Thread.new(infd, outfd) do
    outfd.sync=true
    loop do
      Thread.current[:buf] = infd.getc
      break if Thread.current[:buf].nil?
      outfd.putc Thread.current[:buf]
    end
  end
  return th
end

if ! HTTPD_CMDS.include?(ARGV[0])
  warn("Command must be one of: #{HTTPD_CMDS.join(' ')}")
  exit(false)
end


out=""
err=""
rc=0
single_instance do
  [HTTPD_PRE_CMDS, ARGV[0]].flatten.each do |cmd|
    status = Open4.popen4ext(true, "#{HTTPD_SYSTEM} #{cmd}") do |pid, stdin, stdout, stderr|
      stdin.close
      thset = []
      thset << async_cat(stdout, $stdout)
      thset << async_cat(stderr, $stderr)
      thset.each do |th|
        th.join
      end
    end
    if status.exitstatus != 0
      exit(status.exitstatus)
    end
  end
end
