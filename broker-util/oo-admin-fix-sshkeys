#!/usr/bin/env oo-ruby

#--
# Copyright 2012 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#++

require 'rubygems'
require 'getoptlong'
require 'time'

def usage
  puts <<USAGE
== Synopsis

#{$0}:  Utility to check and fix ssh keys inconsistencies for an application

This utility checks for any applications where the ssh keys in mongo do not match the ssh keys on the gear.
It can also be used to fix the ssh keys inconsistencies by force replacing all ssh keys on the gear with those in the broker database.

== Usage

#{$0} OPTIONS

Options:
-v|--verbose
    Print information about each check being performed
-r|--report-only
    Only report the mismatches, don't fix them 
-h|--help
    Show Usage info
USAGE
  exit 255
end

args = {}
begin
  opts = GetoptLong.new(
    ["--verbose",          "-v", GetoptLong::NO_ARGUMENT],
    ["--report-only",      "-r", GetoptLong::NO_ARGUMENT],
    ["--help",             "-h", GetoptLong::NO_ARGUMENT]
  )
  opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
  usage
end

report_only = args["--report-only"]
verbose = args["--verbose"]
usage if args["--help"]

require "/var/www/openshift/broker/config/environment"
# Disable analytics for admin scripts
Rails.configuration.analytics[:enabled] = false
Rails.configuration.msg_broker[:rpc_options][:disctimeout] = 20
Rails.configuration.msg_broker[:rpc_options][:timeout] = 600

def get_user_info(user)
  user_ssh_keys = {}
  user["ssh_keys"].each { |k| user_ssh_keys[Digest::MD5.hexdigest(k["content"])] = k["name"] } if user["ssh_keys"]
  return {"login" => user["login"], "ssh_keys" => user_ssh_keys}
end

no_error = true
summary = []

datastore_hash = {}
user_hash = {}
domain_hash = {}
gear_sshkey_hash = {}
error_app_uuids = []

puts "Started at: #{Time.now}"
start_time = (Time.now.to_f * 1000).to_i
app_query = {"group_instances.gears.0" => {"$exists" => true}}
app_selection = {:fields => ["name",
                             "uuid",
                             "created_at",
                             "domain_id",
                             "group_instances.gears.uuid",
                             "group_instances.gears.uid",
                             "group_instances.gears.server_identity",
                             "group_instances._id",
                             "app_ssh_keys.name", 
                             "app_ssh_keys.content"],
                 :timeout => false}
ret = []

user_query = {"ssh_keys.0" => {"$exists" => true}}
user_selection = {:fields => ["login", "ssh_keys.name", "ssh_keys.content"], 
                  :timeout => false}

OpenShift::DataStore.find(:cloud_users, user_query, user_selection) do |user|
  user_hash[user["_id"].to_s] = get_user_info(user) 
end

domain_selection = {:fields => ["owner_id", "system_ssh_keys.name", "system_ssh_keys.content"], 
                    :timeout => false}
OpenShift::DataStore.find(:domains, {}, domain_selection) do |domain|
  owner_id = domain["owner_id"].to_s
  domain_hash[domain["_id"].to_s] = owner_id
  system_ssh_keys = {}
  domain["system_ssh_keys"].each { |k| system_ssh_keys[Digest::MD5.hexdigest(k["content"])] = k["name"] } if domain["system_ssh_keys"]
  if !user_hash[owner_id]
    OpenShift::DataStore.find(:cloud_users, {"_id" => owner_id}, user_selection) do |user|
      user_hash[user["_id"].to_s] = get_user_info(user) 
    end
  end

  if user_hash[owner_id]
    user_hash[owner_id]["ssh_keys"].merge! system_ssh_keys
  end
end

OpenShift::DataStore.find(:applications, app_query, app_selection) do |app|
  owner_id = nil
  login = nil
  creation_time = app['created_at']
  domain_id = app['domain_id'].to_s
  app_ssh_keys = {}
  app['app_ssh_keys'].each { |k| app_ssh_keys[Digest::MD5.hexdigest(k["content"])] = k["name"] } if app['app_ssh_keys']

  owner_id = domain_hash[domain_id]

  unless owner_id.nil? or user_hash[owner_id].nil?
    login = user_hash[owner_id]["login"]
    app_ssh_keys.merge! user_hash[owner_id]["ssh_keys"]

    app['group_instances'].each do |gi|
      gi['gears'].each do |gear|
        datastore_hash[gear['uuid'].to_s] = [login, creation_time, gear['server_identity'], app["uuid"], app_ssh_keys ]
      end
    end
  end
end

total_time = (Time.now.to_f * 1000).to_i - start_time
puts "Time to fetch mongo data: #{total_time.to_f/1000}s"
puts "Total gears found in mongo: #{datastore_hash.length}"

get_all_sshkeys_start_time = (Time.now.to_f * 1000).to_i
gear_sshkey_hash, sshkeys_sender_list = OpenShift::ApplicationContainerProxy.get_all_gears_sshkeys
total_time = (Time.now.to_f * 1000).to_i - get_all_sshkeys_start_time
puts "Time to get all sshkeys for all gears from nodes: #{total_time.to_f/1000}s"
puts "Total gears found on the nodes: #{gear_sshkey_hash.length}"
puts "Total nodes that responded : #{sshkeys_sender_list.length}"

# store the current time for comparisons
current_time = Time.now

# now check
puts "Checking application gears and ssh keys on corresponding nodes:" if verbose
datastore_hash.each do |gear_uuid, gear_info|
  login = gear_info[0]
  creation_time = gear_info[1]
  server_identity = gear_info[2]
  app_uuid = gear_info[3]
  db_sshkeys = gear_info[4]

  print "Checking ssh keys for gear: #{gear_uuid}...\t" if verbose
  if (current_time - creation_time) > 600
    if gear_sshkey_hash.has_key? gear_uuid
      gear_sshkeys_list = gear_sshkey_hash[gear_uuid].keys.uniq.sort
      db_sshkeys_list = db_sshkeys.keys.uniq.sort
      if db_sshkeys_list == gear_sshkeys_list
        puts "OK" if verbose
      else
        no_error = false
        puts "FAIL" if verbose
          
        # calculate the common ssh keys in mongo and on the node
        common_sshkeys = gear_sshkeys_list & db_sshkeys_list

        # get the unmatched ssh keys for the gear from the node
        extra_gear_sshkeys = gear_sshkeys_list - common_sshkeys
        extra_gear_sshkeys.each do |key|
          summary << "Gear '#{gear_uuid}' has  key with comment '#{gear_sshkey_hash[gear_uuid][key]}' on the node but not in mongo."
        end
          
        # get the unmatched ssh keys for the gear in mongo
        extra_db_sshkeys = db_sshkeys_list - common_sshkeys
        extra_db_sshkeys.each do |key|
          summary << "Gear '#{gear_uuid}' has key with name '#{db_sshkeys[key]}' in mongo but not on the node."
        end
        
        # record the app uuid for fixing later
        error_app_uuids << app_uuid
      end
    elsif verbose
      puts "OK"
    end
  elsif verbose
    puts "OK"
  end
end

error_app_uuids.uniq!

puts no_error ? "Success" : "Check failed.\n#{summary.join("\n")}"

puts "\nTotal #{error_app_uuids.length} applications have ssh key mismatches." if error_app_uuids.length > 0

# check if we need to fix the ssh key mismatches as well
fixed_app_count = 0
failed_app_count = 0
unless report_only or error_app_uuids.length == 0
  puts "Fixing ssh key inconsistencies for all applications:"
  error_app_uuids.each do |uuid|
    begin
      print "Fixing ssh keys for application: #{uuid}" if verbose
      app = Application.find_by(:uuid => uuid)
      app.fix_gear_ssh_keys()
      puts "OK" if verbose
      fixed_app_count += 1
    rescue Mongoid::Errors::DocumentNotFound
      puts "FAIL" if verbose
      puts "Application '#{uuid}' not found in the database"
      failed_app_count += 1
    rescue Exception => ex
      puts "FAIL" if verbose
      puts "Failed to fix ssh key mismatches for application '#{uuid}': #{ex.message}"
      failed_app_count += 1
    end
  end
end

puts "\nFixed ssh key mismatches for #{fixed_app_count} applications." if fixed_app_count > 0
puts "Failed to fix ssh key mismatches for #{failed_app_count} applications.\n" if failed_app_count > 0

total_time = (Time.now.to_f * 1000).to_i - start_time
puts "Total time: #{total_time.to_f/1000}s"
puts "Finished at: #{Time.now}"
exit (no_error ? 0 : 1)
