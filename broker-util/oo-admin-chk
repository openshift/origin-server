#!/usr/bin/env ruby

#--
# Copyright 2012 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#++


require 'rubygems'
require 'getoptlong'
require 'time'

def usage
    puts <<USAGE
== Synopsis

#{$0}: Check all user applications

== Usage

#{$0} OPTIONS

Options:
-v|--verbose
    Print information about each check being performed
-h|--help
    Show Usage info
USAGE
end

opts = GetoptLong.new(
    ["--verbose",          "-v", GetoptLong::NO_ARGUMENT],
    ["--help",             "-h", GetoptLong::NO_ARGUMENT]
)

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

verbose = args["--verbose"]


require "/var/www/openshift/broker/config/environment"
# Disable analytics for admin scripts
Rails.configuration.analytics[:enabled] = false
  
def datastore_has_gear?(gear_uuid) 
  hash = OpenShift::DataStore.instance.user_collection.find_one({ "apps.group_instances.gears.uuid" => gear_uuid }, {:fields => []})
  return !hash.nil?
end

no_error = true
summary = []

datastore_hash = {}
start_time = (Time.now.to_f * 1000).to_i
query = {"$or" => [{"apps.group_instances.gears.0" => {"$exists" => true}}, {"consumed_gears" => {"$ne" => 0}}]}
fields = {:fields => ["apps.creation_time", "apps.group_instances.gears.uuid", "consumed_gears", "login"]}
mcursor = OpenShift::DataStore.instance.user_collection.find(query, fields)
ret = []
mcursor.each do |hash|
  gear_count = 0
  
  hash['apps'].each { |app|
    creation_time = Time.parse(app['creation_time'])
    app['group_instances'].each { |gi|
      gi['gears'].each { |gear|
        gear_count += 1
        datastore_hash[gear['uuid']] = creation_time
      }
    }
  }
  if hash['consumed_gears'] != gear_count
    msg = "FAIL - user #{hash['login']} has a mismatch in consumed gears (#{hash['consumed_gears']}) and actual gears (#{gear_count})!"
    puts msg if verbose
    summary << msg
    no_error = false
  else
    puts "OK - user #{hash['login']} has consumed_gears equal to actual gears (#{gear_count})!" if verbose
  end
end
total_time = (Time.now.to_f * 1000).to_i - start_time
puts "Time to fetch mongo data: #{total_time.to_f/1000}s"

start_time = (Time.now.to_f * 1000).to_i
node_hash = OpenShift::ApplicationContainerProxy.get_all_gears
total_time = (Time.now.to_f * 1000).to_i - start_time
puts "Time to get all gears from nodes: #{total_time.to_f/1000}s"

# now check
puts "Checking application gears on corresponding nodes:" if verbose
datastore_hash.each { |gear_uuid, creation_time|
  print "#{gear_uuid}...\t" if verbose
  if (Time.now - creation_time) > 600
    if not node_hash.has_key? gear_uuid
      if datastore_has_gear?(gear_uuid)
        no_error = false
        puts "FAIL" if verbose
        summary << "Gear #{gear_uuid} does not exist on any node"
      elsif verbose
        puts "OK"
      end
    elsif verbose
      puts "OK"
    end
  elsif verbose
    put "OK"
  end
}

# now check reverse
puts "Checking node gears in application database:" if verbose
node_hash.each { |gear_uuid, server_identity|
  print "#{gear_uuid}...\t" if verbose
  if not datastore_hash.has_key? gear_uuid
    if !datastore_has_gear?(gear_uuid)
      no_error = false
      puts "FAIL" if verbose
      summary << "Gear #{gear_uuid} exists on node #{server_identity} but does not exist in mongo database"
    elsif verbose
      puts "OK"
    end
  elsif verbose
    puts "OK"
  end
}

puts no_error ? "Success" : "Check failed.\n #{summary.join("\n")}"
exit (no_error ? 0 : 1)
