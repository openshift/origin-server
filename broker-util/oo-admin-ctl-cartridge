#!/usr/bin/env oo-ruby

require 'optparse'
require 'ostruct'

PATH = '/var/www/openshift/broker/config/environment'

class Command
  def refresh(options)
    env!(options)
    carts = OpenShift::ApplicationContainerProxy.find_one.get_available_cartridges
    types = CartridgeType.update_from(carts)
    update_types(types)
  end

  def clean(options)
    env!(options)
    puts "Deleting all cartridges from the broker ..."
    CartridgeType.delete_all
    Rails.cache.clear
    0
  rescue => e
    warn "Failed to delete some cartridges"
    warn e.message
    warn e.backtrace
    1
  end

  def list(options)
    env!(options)
    carts = CartridgeType.all
    if options.raw
      carts.each do |type|
        puts JSON.pretty_generate(type.cartridge.to_descriptor)
      end
      return 0
    end

    output = carts.map do |type|
      [
        type.name,
        case
        when type.is_web_proxy? then "web_proxy"
        when type.is_web_framework? then "web"
        when type.is_plugin? then "plugin"
        else "service"
        end,
        type.display_name,
        type.obsolete? ? 'obsolete' : '',
        type.manifest_url
      ]
    end
    output.sort_by!{ |line| [line[1], line[4].nil? ? 0 : 1, line[0]] }
    widths = Array.new(output.first.length, 0)
    output.each{ |line| widths.each_with_index{ |w, i| widths[i] = [w, (line[i] || "").length].max } }
    fmt = widths.map{ |w| "%-#{w}s" }.join(" ")
    output.each{ |line| puts fmt % line }
    0
  rescue => e
    warn "Failed to list cartridges"
    warn e.message
    warn e.backtrace
    1
  end

  def delete(options)
    env!(options)
    raise ArgumentError, "--name NAMES is a required argument for delete" if options.names.nil? || options.names.empty?
    carts = CartridgeType.in(name: options.names)
    if carts.empty?
      warn "No cartridges match #{options.names.map{|s| "'#{s}'"}.join(', ')}."
      return 2
    end
    carts.delete
    puts "#{carts.map(&:name).join(',')} were deleted."
    0
  rescue ArgumentError
    warn $!
    1
  rescue => e
    warn "Failed to delete cartridges"
    warn e
    warn e.backtrace
    1
  end

  def import(options)
    env!(options)
    raise ArgumentError, "--url URL is a required argument for import" if options.url.nil? || options.url.empty?

    text = CartridgeCache.download_from_url(options.url)
    versions = OpenShift::Runtime::Manifest.manifests_from_yaml(text)
    types = CartridgeType.update_from(versions, options.url)

    if not options.force
      source_change, types = types.partition{ |t| t.manifest_url_changed? && t.persisted? }
      if not source_change.empty?
        warn "Some cartridges had their manifests changed:"
        source_change.each do |c|
          warn "  #{c.name}: #{c.changes['manifest_url'][0]} -> #{c.changes['manifest_url'][1]}"
        end
        warn "You must pass --force to update manifest URLs for imported cartridges"
      end
    end

    update_types(types, "from #{options.url}")
  rescue KeyError
    warn text
    raise
  rescue => e
    warn "Failed to import cartridge"
    warn e.message
    warn e.backtrace
    1
  end

  protected
    def env!(options)
      require options.broker || PATH
    end

    def update_types(types, source=nil)
      if types.empty?
        warn "No changes#{ " #{source}" if source }"
        return 0
      end
      warn "Updating #{types.length} cartridges#{ " #{source}" if source } ..."
      if types.inject(0){ |f, type| f + save_cart(type) } > 0
        1
      else
        Rails.cache.clear
        0
      end
    end

    def save_cart(type)
      op = type.persisted? ? "update" : "add"
      type.save!
      puts "#{op.capitalize[0]} #{type.name}#{ " (obsolete)" if type.obsolete?}"
      0
    rescue => e
      warn "Failed to #{op} #{type.name}"
      warn e.message
      warn e.backtrace
      1
    end

    def warn(*args)
      $stderr.puts(*args)
    end
end

methods = (Command.instance_methods(false) & Command.new.public_methods).sort
options = OpenStruct.new
p = OptionParser.new do |opts|
  opts.banner = "
== Synopsis

#{File.basename $0}: Manage cartridges

Commands:
 refresh    - Update the broker with the latest cartridges from the nodes
 clean      - Delete all cartridges in the broker
 list       - List all cartridges

== Usage: oo-admin-ctl-cartridge -c (#{methods.join('|')})"

  opts.separator ''
  opts.on('-c', '--command COMMAND',
          methods.map(&:to_s),
          [],
          "A command to execute") do |command|
    options.command = command
  end

  opts.on('--broker PATH', "The path to the broker",
          " (default #{PATH})") do |path|
    options.broker = path
  end

  opts.on('--raw', "Dump all cartridge information as JSON") do
    options.raw = true
  end

  opts.on('--force', "Confirm potentially destructive actions") do
    options.force = true
  end


  opts.on('-n NAMES', '--name NAMES', "Comma-delimited cartridge names.") do |names|
    options.names = names.split(/[\, ]/)
  end

  opts.on('-u URL', '--url URL', "URL of a cartrige manifest to import.") do |url|
    options.url = url
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit 0
  end
end
p.parse!(ARGV)

if options.command.nil?
  puts p
  exit 0
end
exit Command.new.send(options.command.downcase.gsub(/[\-]/,'_'), options)
