#!/usr/bin/env oo-ruby

require 'optparse'
require 'ostruct'

PATH = '/var/www/openshift/broker/config/environment'

class Command
  def import_node(options)
    env!(options)
    carts = OpenShift::ApplicationContainerProxy.find_one(options.node).get_available_cartridges
    types = CartridgeType.update_from(carts)
    update_types(options, types)
  end

  def clean(options)
    env!(options)
    puts "Deleting all cartridges from the broker ..."
    CartridgeType.delete_all
    Rails.cache.clear
    0
  rescue => e
    exception e, "Failed to delete some cartridges"
    1
  end

  def list(options)
    env!(options)
    carts = CartridgeType.all
    carts = carts.active if options.active
    carts = carts.in(name: options.names) if options.names
    carts = carts.in(_id: options.ids) if options.ids
    return 0 if carts.empty?

    if options.raw
      carts.each do |type|
        puts JSON.pretty_generate(type.cartridge.to_descriptor)
      end
      return 0
    end

    output = carts.map do |type|
      line = [
        type.priority? ? '*' : ' ',
        type.name,
        case
        when type.is_web_proxy? then "web_proxy"
        when type.is_web_framework? then "web"
        when type.is_plugin? then "plugin"
        else "service"
        end,
        type.display_name,
        type.created_at.strftime("%Y/%m/%d %H:%M:%S %Z"),
        type._id.to_s,
        type.obsolete? ? 'obsolete' : '',
        type.manifest_url,
      ]
      line
    end
    output.sort_by!{ |line| [line[2], line[5].nil? ? 0 : 1, line[1]] }
    if options.quiet
      output.map!{ |line| [line[5]] }
    elsif options.all
    else
      output.each{ |line| line.delete_at(5) }
    end

    table(output)
    0
  rescue => e
    warn "Failed to list cartridges"
    warn e.message
    warn e.backtrace
    1
  end

  def delete(options)
    ids = from_options_or_stdin(options, [:names, :ids], '--name NAMES')
    env!(options)
    carts = CartridgeType.or({:name.in => ids}, {:_id.in => ids})
    if carts.empty?
      warn "No cartridges match #{ids.map{|s| "'#{s}'"}.join(', ')}."
      return 2
    end
    names = carts.map{ |s| "'#{s}'" }.join(', ')
    carts.delete
    puts "#{names} were deleted."
    0
  rescue ArgumentError
    warn $!
    1
  rescue => e
    exception e, "Failed to delete cartridges"
    1
  end

  def deactivate(options)
    ids = from_options_or_stdin(options, [:names, :ids], '--ids IDS')
    env!(options)
    CartridgeType.or({:name.in => ids}, {:_id.in => ids}).each do |cart|
      if cart.priority
        cart.priority = nil
        cart.save!
        puts "#{cart.name} was deactivated."
        Rails.cache.clear
      else
        puts "#{cart.name} was not active."
      end
    end
    0
  rescue ArgumentError
    warn $!
    1
  rescue => e
    exception e, "Failed to deactivate cartridge"
    1
  end

  def activate(options)
    ids = from_options_or_stdin(options, [:names, :ids], '--ids IDS')
    env!(options)
    code = 0
    CartridgeType.or({:name.in => ids}, {:_id.in => ids}).each do |cart|
      if cart.obsolete? && !options.force
        warn "#{cart.name} is obsolete. Please pass --force to activate."
      elsif cart.activate
        puts "#{cart._id} # now the active cartridge for #{cart.name}"
        Rails.cache.clear
      else
        warn "Unable to activate #{options.id}"
        type.errors.full_messages.each do |m|
          warn "  #{m}"
        end
        code = 1
      end
    end
    code
  rescue ArgumentError
    warn $!
    1
  rescue => e
    exception e, "Failed to activate cartridge"
    1
  end

  def import(options)
    env!(options)
    raise ArgumentError, "--url URL is a required argument for import" if options.url.nil? || options.url.empty?

    text = CartridgeCache.download_from_url(options.url)
    versions = OpenShift::Runtime::Manifest.manifests_from_yaml(text)
    types = CartridgeType.update_from(versions, options.url)

    if not options.force
      source_change, types = types.partition{ |t| t.manifest_url_changed? && t.persisted? }
      if not source_change.empty?
        warn "Some cartridges had their manifest URLs changed:"
        source_change.each do |c|
          warn "  #{c.name}: #{c.changes['manifest_url'][0]} -> #{c.changes['manifest_url'][1]}"
        end
        warn "You must pass --force to update manifest URLs for imported cartridges"
      end
    end

    update_types(options, types, "from #{options.url}")
  rescue KeyError
    warn text
    raise
  rescue => e
    exception e, "Failed to import cartridge"
    1
  end

  protected
    def env!(options)
      require options.broker || PATH
    end

    def from_options_or_stdin(options, option, option_name=nil)
      option = Array(option).find{ |s| options.send(s) }
      items =
        if option && value = options.send(option)
          value
        else
          ARGF.map do |line|
            text = line.gsub(/([^\\])#.*\Z/, "$1").strip
            text if text.length > 0
          end.compact
        end
      raise ArgumentError, "You must pass one or more filenames, pipe to stdin, or specify the option #{option_name}." if items.empty?
      items
    end

    def table(output)
      widths = Array.new(output.first.length, 0)
      output.each{ |line| widths.each_with_index{ |w, i| widths[i] = [w, (line[i] || "").length].max } }
      fmt = widths.map{ |w| "%-#{w}s" }.join(" ")
      output.each{ |line| puts (fmt % line).rstrip }
    end

    def update_types(options, types, source=nil)
      if types.empty?
        warn "No changes#{ " #{source}" if source }"
        return 0
      end
      warn "Updating #{types.length} cartridges#{ " #{source}" if source } ..."
      if types.inject(0){ |f, type| f + save_cart(options, type) } > 0
        1
      else
        Rails.cache.clear
        0
      end
    end

    def save_cart(options, type)
      op = type.persisted? || type.has_predecessor? ? "update" : "add"
      activate = options.activate && (!type.obsolete? || options.force)
      if type.send(activate ? :activate : :save)
        puts "#{type._id} # #{op.capitalize[0]} #{type.name} #{ " (obsolete)" if type.obsolete?}#{ " (active)" if activate}"
      else
        warn "Failed to #{op} #{type.name}"
        type.errors.full_messages.each do |m|
          warn "  #{m}"
        end
      end
      0
    rescue => e
      exception e, "Failed to #{op} #{type.name}"
      1
    end

    def warn(*args)
      $stderr.puts(*args)
    end

    def exception(e, *args)
      $stderr.puts(*args)
      $stderr.puts e.message
      $stderr.puts "  #{e.backtrace.join("  \n")}"
    end
end

methods = (Command.instance_methods(false) & Command.new.public_methods).map{ |s| s.to_s.gsub('_', '-')}.sort
options = OpenStruct.new
p = OptionParser.new do |opts|
  opts.banner = "
== Synopsis

#{File.basename $0}: Manage cartridges

Commands:
  activate    - Make a specific cartridge active.
                Requires id or name, or input from STDIN.

  deactivate  - Disable a cartridge from being visible to users
                Requires id or name, or input from STDIN.

  clean       - Delete all cartridges in the broker

  delete      - Remove one or more named cartridges

  import      - Import a manifest as one or more cartridges
                Requires --url

  import-node - Import the latest cartridges from a randomly selected node.

  list        - List all cartridges

For delete, activate, and deactivate, you may pass a file containing ids
or names.

== Usage: oo-admin-ctl-cartridge -c (#{methods.join('|')})"

  opts.separator ''
  opts.on('-c', '--command COMMAND',
          methods.map(&:to_s),
          [],
          "A command to execute") do |command|
    options.command = command
  end

  opts.on('--broker PATH', "The path to the broker",
          " (default #{PATH})") do |path|
    options.broker = path
  end

  opts.on('--raw', "Dump all cartridge information as JSON") do
    options.raw = true
  end

  opts.on('--force', "Force activation of obsolete cartridges") do
    options.force = true
  end

  opts.on('-a', '--active', "Show only active cartridges") do |url|
    options.active = true
  end

  opts.on('--activate', "Mark imported or updated cartridges as active.") do
    options.activate = true
  end

  opts.on('--name NAMES', "Comma-delimited cartridge names.") do |names|
    options.names = names.split(/[\, ]/)
  end

  opts.on('-q', "Display only ids") do
    options.quiet = true
  end

  opts.on('--ids IDS', "ID for a cartridge version to activate or deactivate (comma-delimited).") do |ids|
    options.ids = ids.split(/[\, ]/)
  end

  opts.on('--node NODE', "Identifier for a node (server-identity) to import from.") do |node|
    options.node = node
  end

  opts.on('-u URL', '--url URL', "URL of a cartrige manifest to import.") do |url|
    options.url = url
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit 0
  end
end
p.parse!(ARGV)

if options.command.nil?
  puts p
  exit 0
end
exit Command.new.send(options.command.downcase.gsub(/[\-]/,'_'), options)
