#!/usr/bin/env oo-ruby

require 'rubygems'
require 'stomp'

def send_msg(msg)
  # Reinitializing connection to avoid a missing message in a failover
  # scenario https://bugzilla.redhat.com/show_bug.cgi?id=1128857
  @conn = Stomp::Connection.open({ :hosts => @hosts })
  @conn.publish @dest, msg
  @conn.disconnect
end

def notify_reinit_start()
  msg = {
    :action => :reinit_start,
  }
  send_msg msg.to_yaml
end

def notify_reinit_end()
  msg = {
    :action => :reinit_end,
  }
  send_msg msg.to_yaml
end

# Initialize ActiveMQ
Rails.logger.debug("Listening for routing events")
@dest = Rails.application.config.routing_activemq[:destination]
@hosts = Rails.application.config.routing_activemq[:hosts]
@mcollective_conf = Rails.application.config.routing_activemq[:mcollective_conf]

# If the MCOLLECTIVE_CONFIG setting is found in the routing plugin config, read settings from MCollective client config
unless @mcollective_conf.nil?
  Rails.logger.debug("ACTIVEMQ_HOSTS settings is now being overridden by MCollective client config settings because you set MCOLLECTIVE_CONFIG")
  @mcollective_conf = OpenShift::Config.new(@mcollective_conf)
  @plugin_prefix = "plugin.activemq.pool."
  pools = @mcollective_conf.get("#{@plugin_prefix}size").to_i
  @hosts = []

  1.upto(pools) do |poolnum|
    host = {}

    host[:host] = @mcollective_conf.get("#{@plugin_prefix}#{poolnum}.host")
    host[:port] = @mcollective_conf.get("#{@plugin_prefix}#{poolnum}.port", 61613).to_i
    host[:ssl] = @mcollective_conf.get_bool("#{@plugin_prefix}#{poolnum}.ssl", "false")
    host[:ssl] = ssl_parameters(poolnum, @mcollective_conf.get_bool("#{@plugin_prefix}#{poolnum}.ssl.fallback", "false")) if host[:ssl]

    Rails.logger.debug("Adding #{host[:host]}:#{host[:port]} to the connection pool")
    @hosts << host
  end
end

# Credentials are read from the plugin configuration and not the MCollective client.cfg since these are the routing credentials.
@hosts = @hosts.map do |host|
  host.merge({
    :login => Rails.application.config.routing_activemq[:username],
    :passcode => Rails.application.config.routing_activemq[:password],
    })
  end

  if Rails.application.config.routing_activemq[:debug]
    @conn = Class.new(Object) do
      def publish(dest, msg)
        Rails.logger.debug("Destination #{dest} gets message:\n#{msg}")
      end
    end.new
  end

# Begin Script
filter = {}

notify_reinit_start

# Loop through all applications
Application.where(filter).each do |app|

  # notify_create_application
  OpenShift::RoutingService.notify_create_application app

  # notify_create_public_endpoint

  # notify_ssl_cert_add

  # notify_add_alias

end

notify_reinit_end
