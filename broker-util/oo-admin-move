#!/usr/bin/env oo-ruby

require 'rubygems'
require 'json'
require 'getoptlong'

def usage
  puts <<USAGE
== Synopsis

oo-admin-move: Move an app from one node to another

== Usage

oo-admin-move OPTIONS

Options:
--gear_uuid <gear_uuid>[,<gear_uuid>,<gear_uuid>]
    Gear uuid to move
--destination_district_uuid <district_uuid>
    Destination district uuid
-i|--target_server_identity <server_identity>
    Target server identity
-p|--node_profile <node_profile>
    Node profile
-t|--timeout
    timeout
--json
    Print the move report at finish in JSON
--change_district
    Move to a different district other than the source district
-h|--help
    Show Usage info
USAGE
  exit 255
end

opts = GetoptLong.new(
    ["--gear_uuid",        "-g", GetoptLong::REQUIRED_ARGUMENT],
    ["--destination_district_uuid", "-u", GetoptLong::REQUIRED_ARGUMENT],
    ["--target_server_identity", "-i", GetoptLong::REQUIRED_ARGUMENT],
    ["--node_profile",     "-p", GetoptLong::REQUIRED_ARGUMENT],
    ["--timeout",          "-t", GetoptLong::REQUIRED_ARGUMENT],
    ["--change_district",  GetoptLong::NO_ARGUMENT],
    ["--change_region",    GetoptLong::NO_ARGUMENT],
    ["--json",  GetoptLong::NO_ARGUMENT],
    ["--help",             "-h", GetoptLong::NO_ARGUMENT]
)

args = {}
begin
  opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
  usage
end

gear_uuid = args["--gear_uuid"]
target_server_identity = args['--target_server_identity']
destination_district_uuid = args['--destination_district_uuid']
node_profile = args['--node_profile']
change_district = args['--change_district'] ? true : false
change_region = args['--change_region'] ? true : false
json = args['--json'] ? true : false
timeout  = args['--timeout']

if args["--help"]
  usage
end

if timeout
  unless timeout =~ /^[0-9]+$/
    puts "ERROR: Timeout must be a positive integer"
    exit 1
  end
end

unless gear_uuid
  puts "ERROR: Please specify gear_uuid for moving gear"
  exit 1
end

require "#{ENV['OPENSHIFT_BROKER_DIR'] || '/var/www/openshift/broker'}/config/environment"
# Disable analytics for admin scripts
Rails.configuration.analytics[:enabled] = false

# Set the MCollective options
if timeout
  Rails.configuration.msg_broker[:rpc_options][:timeout] = timeout.to_i
end

rc = 0
move_status = {}
gear_uuid.split(',').each do |uuid|
    app = nil
    user = nil
    gear = nil

    app, gear = Application.find_by_gear_uuid(uuid)

    if gear.nil? or app.nil?
      message = "ERROR: Gear not found: #{uuid}"
      if json
        move_status[uuid] = { :result => false, :message => message }
      else
        puts message
      end
      rc |= 1
      next
    end

    if app.scalable and node_profile
      message = "Cannot specify 'node_profile' for a gear belonging to a scalable application."
      if json
        move_status[uuid] = { :result => false, :message => message }
      else
        puts message
      end
      rc |= 1
      next
    end

    url = "http://#{app.name}-#{app.domain.namespace}.#{Rails.configuration.openshift[:domain_suffix]}"

    unless json
      puts "URL: #{url}"
      puts "Login: #{app.domain.owner.login}"
      puts "App UUID: #{app._id}"
      puts "Gear UUID: #{gear._id}"
    end

    destination_container = nil
    destination_container = OpenShift::ApplicationContainerProxy.instance(target_server_identity) if target_server_identity
    if json
      move_status[uuid] = { :login => app.domain.owner.login,
                            :app_uuid    => app._id,
                            :gear_uuid   => gear._id,
                            :app_name    => app.name,
                            :app_domain  => app.domain.namespace,
                            :destination => target_server_identity,
                            :source      => gear.server_identity }
    end

    reply = nil
    begin
      gear.get_proxy.disable_log_debug! if json
      reply = gear.get_proxy.move_gear_secure(gear, destination_container, destination_district_uuid, change_district, change_region, node_profile)
      if json
        app, gear = Application.find_by_gear_uuid(uuid)
        move_status[uuid].merge!({ :result => true, :destination => gear.server_identity })
      end
    rescue OpenShift::NodeException => ne
      if json
        move_status[uuid].merge!({ :result => false, :message => ne.message, :trace => ne.backtrace })
      else
        puts ne.message
      end
    rescue OpenShift::UserException => ue
      if json
        move_status[uuid].merge!({ :result => false, :message => ue.message, :trace => ue.backtrace })
      else
        puts ue.message
      end
    end

    unless reply.nil?
      if json
        move_status[uuid].merge!({ :errorIO => reply.errorIO.string }) unless reply.errorIO.string.empty?
        move_status[uuid].merge!({ :debugIO => reply.debugIO.string }) unless reply.debugIO.string.empty?
      else
        puts "################# ADDITIONAL DEBUG OUTPUT #################\n#{reply.debugIO.string}\n" unless reply.debugIO.string.empty?
        puts "################# ADDITIONAL ERROR OUTPUT #################\n#{reply.errorIO.string}\n" unless reply.errorIO.string.empty?
      end
    end
end
puts move_status.to_json if json
exit rc
