.\" Text automatically generated by txt2man
.TH oo-admin-ctl-team  
.SH NAME
\fBoo-admin-ctl-team
\fB
.SH SYNOPSIS
.nf
.fam C
oo-admin-ctl-team \fB-c\fP (create|delete|list|show|sync|sync-from-file|sync-to-file) [ \fB--help\fP ]

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION

This is an administrative utility to manage global teams.
.SH OPTIONS

.TP
.B
\fB-c\fP|\fB--command\fP COMMAND
A command to execute (Required).
.PP
.nf
.fam C
        list            - List all teams

        create          - Creates a new team
        
        update          - Updates a team's maps-to value

        delete          - Delete team

        show            - Show team and its members

        sync            - Syncs with LDAP groups

        sync-to-file    - Generates a sync file for review.  No changes are made to the teams and their members.

        sync-from-file  - Syncs from file.  See sync-to-file

.fam T
.fi
.TP
.B
\fB--name\fP NAME
Team name to create, show or delete.
.TP
.B
\fB--maps-to\fP MAPS_TO
The distinguished name for the LDAP group the team maps to.
.TP
.B
\fB--groups\fP GROUPS
A comma separated list of LDAP groups to add.
.TP
.B
\fB--config-file\fP CONFIG_FILE
Path to file containing LDAP configuration information (Required for sync and sync-to-file). See CONFIGURATION section below.
.TP
.B
\fB--out-file\fP OUT_FILE
Path to output file (Required for sync-to-file).
.TP
.B
\fB--in-file\fP IN_FILE
Path to input file (Required for sync-from-file).
.TP
.B
\fB--create-new-users\fP
Create new users in openshift if they do not exist.
.TP
.B
\fB--remove-old-users\fP
Remove members from team that are no longer in the group.
.TP
.B
\fB--broker\fP PATH
The path to the broker (default /var/www/openshift/broker/config/environment).
.TP
.B
\fB-h\fP|\fB--help\fP
Display a simple usage page.
.RE
.PP


.SH CONFIGURATION 
.P
This file holds LDAP configuration information. Here's an example based on a typical OpenLDAP schema.
.P
Host: openldap-server.example.com
.br
Port: 389
.br
Get-Group: 
  Base: dc=example,dc=com
  Filter: (cn=<group_name>)
.br
Get-Group-Users:
  Base: dc=example,dc=com
  Filter: (cn=<group_cn>)
  Attributes: [member]
.br
Get-User:
  Base: dc=example,dc=com
  Filter: (uid=<user_id>)
  Attributes: [emailAddress]
.br
Openshift-Username: emailAddress
.br
.P

.B
The above example works if your user and group entries look something like this:
.P
dn: cn=mygroup,ou=Groups,dc=example,dc=com
.br
cn: mygroup
.br
member: uid=jdoe
.br
member: uid=fbar
.PP
dn: cn=John Doe,ou=Users,dc=example,dc=com
.br
cn: John Doe
.br
uid: jdoe
.br
emailAddress: jdoe@mycompany.com
.PP
.B
However, if your schema looks something like this:
.P
dn: cn=mygroup,ou=Groups,dc=example,dc=com
.br
cn: mygroup

.PP
dn: cn=John Doe,ou=Users,dc=example,dc=com
.br
cn: John Doe
.br
uid: jdoe
.br
emailAddress: jdoe@mycompany.com
.br
memberOf: cn=myteam,ou=Groups,dc=example,dc=com
.PP
.B
Then your config file would look something like this:
.PP
Host: directory-server.example.com
.br
Port: 389
.br
Get-Group: 
  Base: dc=example,dc=com
  Filter: (cn=<group_cn>)
.br
Get-Group-Users:
  Base: dc=example,dc=com
  Filter: (memberOf=<group_dn>)
  Attributes: [emailAddress]
.br
Openshift-Username: emailAddress
.br
.PP
.B 
Note: The placeholders <group_cn>, <group_dn> and <user_id> will be replaced by actual values at the time of the script execution.
.PP
An encrypted connection and authentication may be specified in the configuration as well:
.PP
Host: directory-server.example.com
.br
Port: 636
.br
Encryption: true
.br
Username: cn=admin,dc=example,dc=com
.br
Password: passw0rd
.br

.SH EXAMPLE
$ oo-admin-ctl-team \fB-c\fP list
.SH AUTHOR
Lili Nader <lnader@redhat.com> - man page written for OpenShift Origin
