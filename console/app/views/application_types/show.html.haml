%h1.invisible Configure New Application
= app_wizard_steps_create 1
= breadcrumb_for_create_application(@application_type.persisted? ? "Based on '#{@application_type.display_name}'" : "From scratch")
= flashes

:css
  #new_application.collapse-help .help-block { white-space: nowrap; opacity: 0.5; margin-top: 0; }
  #new_application.collapse-help .help-block:hover { opacity: 1; cursor: pointer; }

- new_domain_redirect_path = application_type_path(@application_type.id, @application_type.to_params)
- advanced_path = application_type_path(@application_type.id, @application_type.to_params.merge(:advanced => true))

= semantic_form_for @application, :url => applications_path, :html => {:class => "form-horizontal form-important #{@compact ? 'collapse-help' : ''}"} do |f|
  = hidden_field_tag :unlock, @unlock_cartridges
  - if @application_type.persisted?
    = f.hidden_field :application_type, :value => @application_type.id
  - else
    - Array(@application_type.cartridges).each do |c|
      = hidden_field_tag 'application_type[cartridges][]', c
    = hidden_field_tag 'application_type[initial_git_url]', @application_type.initial_git_url
    -#= hidden_field_tag 'application_type[initial_git_branch]', @application_type.initial_git_branch

  - e = @application.errors
  = f.semantic_errors :except => [:initial_git_url, :initial_git_branch, :name, :domain_name, :cartridges, :gear_profile]

  - if @application_type.tags.include? :in_development
    .alert This template is development only and not accessible in production

  %fieldset.inputs
    .control-group.control-group-important
      %h3.control-label Based On
      .controls.first
        %h3
          #{@application_type.display_name} #{@application_type.source.to_s.humanize}

          - if @application_type.usage_rates?
            = usage_rate_indicator

          - if @application_type.cartridge?
            %span.font-icon.font-icon-size-16.font-icon-grey{"aria-hidden" => "true", "data-icon" => "\ue021", "title" => "Cartridge"}
          - elsif @application_type.quickstart?
            %span.font-icon.font-icon-size-16.font-icon-grey{"aria-hidden" => "true", "data-icon" => "\ue029", "title" => "QuickStart"}

      .controls
        - if @application_type.persisted?
          = show_description(@application_type.description, :class => 'help-block')

          - if @application_type.learn_more_url
            %p.help-block= link_to "Learn more", @application_type.learn_more_url
          - elsif @application_type.website
            %p.help-block= link_to @application_type.website, @application_type.website

          %p.help-block
            - case @application_type.support_type
            - when :openshift
              %span.label-support.label-support-openshift{:title => 'Updated and maintained by the OpenShift team'} OpenShift maintained
            - when :partner
              %span.label-support.label-support-openshift{:title => 'Updated and maintained by a partner'} Partner created
            - else
              %span.label-support.label-support-community.text-warning{:title => 'Created by a community member and not maintained by OpenShift'} Community created

            - unless @application_type.automatic_updates?
              %span.text-warning{:title => 'When you create a QuickStart or a community cartridge, you are copying code from another repository. You are responsible for applying security fixes and updates.'}
                =" / Does not receive automatic security updates"


          %p.help-block.label-tags= application_type_tags(@application_type.tags)

        - else
          %p.help-block 
            This application is based on a URL.
            -# If you want others to see this application, #{link_to "create a quickstart in our community", create_quickstart_url}.
          %p.help-block= link_to "Share this link", application_type_url(@application_type.id, @application_type.to_params)

  %fieldset.inputs
    -# This is implemented custom here rather than integrating into Formtastic because of its specific nature
    -#.control-group.control-group-important{:data => errors ? {:"server-error" => 'true'} : {}, :class => errors ? 'error' : ''}
    = control_group(e.has_key?(:name) || e.has_key?(:domain_name), :important => true) do
      %h3.control-label Public URL
      .controls.first
        - here = application_type_path(@application_type.id, params)
        - create_domain_url = new_domain_path({:then => here, :domain_param => 'application[domain_name]'})
        -# TODO JTL: Remove
        - if params[:test]
          - mine = [Domain.new(:name => 'me1'), Domain.new(:name => 'me2')]
          - shared = [Domain.new(:name => 'shared1'), Domain.new(:name => 'shared2')]
          - [false, true].each do |can_create|
            - [[], [mine.first], mine].each do |my_domains|
              - [[], [shared.first], shared].each do |shared_domains|
                - default_domain = my_domains.first
                - domains = my_domains + shared_domains
                - ([nil] + [my_domains.first, shared_domains.first, Domain.new(:name => 'x')].compact.map(&:name)).each do |current_value|
                  %div= "mine=#{my_domains.length}, shared=#{shared_domains.length}, can_create=#{can_create}, current_value=#{current_value.inspect}"
                  %div
                    - @application.domain_name = current_value
                    = render :partial => 'applications/name', :locals => {:form => f, :application => @application, :can_create => can_create, :domains => domains, :create_domain_url => create_domain_url}
        - else
          = render :partial => 'applications/name', :locals => {:form => f, :application => @application, :can_create => @can_create, :domains => @user_writeable_domains, :create_domain_url => create_domain_url}
        = f.inline_errors_for :name
        = f.inline_errors_for :domain_name
      .controls
        %p.help-block
          OpenShift will automatically register this domain name for your application.  You can add
          your own domain name later.

    = control_group(e.has_key?(:initial_git_url) || e.has_key?(:initial_git_branch), :important => true) do
      %h3.control-label Source Code
      .controls.first
        = f.text_field :initial_git_url, :class => 'expand', :placeholder => 'Optional URL to a Git repository'
        -#= f.text_field :initial_git_branch, :class => 'narrow', :placeholder => 'Git branch (optional)'
        %span branch 'master'
        = f.inline_errors_for :initial_git_url
        = f.inline_errors_for :initial_git_branch

      .controls
        %p.help-block 
          - if @application_type.initial_git_url
            Your application will start with an exact copy of the code and configuration provided in 
            this Git repository. OpenShift may expect certain files to exist in certain directories,
            which may require you to update your repository after creation.
          - else
            We'll create a Git code repository in the cloud, and populate it with a set of 
            reasonable defaults. If you provide a Git URL, your application will start with an exact 
            copy of the code and configuration provided in this Git repository. 

    = control_group(e.has_key?(:gear_profile), :important => true) do
      %h3.control-label Gears
      .controls.first
        - if @gear_sizes.length > 1
          = f.select :gear_profile, @gear_sizes.map{ |size| [size.to_s.titleize, size]}, {}
        - else
          %h3= @gear_sizes.first.to_s.titleize
          = f.hidden_field :gear_profile, :value => @gear_sizes.first.to_s
        = f.inline_errors_for :gear_profile

      .controls
        %p.help-block
          Gears are the application containers running your code.
          - if @gear_sizes.empty?
            There are no gear sizes available for this application.
          - else
            For most applications, the '#{@gear_sizes.first.to_s}' gear size provides plenty of resources.

          - if @gear_sizes.length > 1
            If you require more resources, select a larger gear size here.

    = control_group(e.has_key?(:cartridges), :important => true) do
      %h3.control-label Cartridges
      .controls.first
        - if @unlock_cartridges
          = text_field_tag 'application_type[cartridges]', @application_type.cartridge_specs, :class => 'expand', :placeholder => 'URL to a downloadable cartridge'
        - elsif @cartridges.present?
          %h3
            = map_to_sentence(@cartridges) do |(name, carts)|
              - if carts.length > 1
                = select_tag 'application[cartridges][]', options_for_select(carts.sort.map{ |c| [c.display_name, c.name] }, [carts.map(&:name) & @application.cartridge_names].first ), :title => "Choose a cartridge that matches '#{name}'"
              - elsif carts.length == 1
                - if carts.first.url
                  = hidden_field_tag('application[cartridges][][url]', [carts.first.url])
                  = link_to carts.first.display_name, carts.first.url
                - else
                  = hidden_field_tag('application[cartridges][]', [carts.first.name])
                  = carts.first.display_name
              - else
                %span.text-warning #{name}
        - else
          %h3
            %span.text-warning{:title => 'All applications require at least a web cartridge'} None
        = f.inline_errors_for :cartridges

      .controls
        %p.help-block
          Applications are composed of cartridges - each of which exposes a service or 
          capability to your code.  All applications must have a web cartridge.

        - if @unlock_cartridges or (@cartridges and @cartridges.any?{ |(name, carts)| carts.any?{ |c| c.url } })
          %span.text-warning Downloaded cartridges do not receive updates automatically.

    .control-group.control-group-important
      %h3.control-label Scaling
      .controls.first
        - can_scale = can_scale_application_type(@application_type, @domain_capabilities)
        - scale_reason = cannot_scale_title(@application_type, @domain_capabilities)
        - if can_scale
          = f.select :scale, scale_options, {}
        - else
          %h3
            %span.text-warning{:title => scale_reason}= scale_options[0][0]

      .controls
        - if warn = warn_may_not_scale(@application_type, @domain_capabilities)
          %span.text-warning= warn
        %p.help-block
          OpenShift automatically routes web requests to your web gear.
          - if can_scale
            If you allow your application to scale, we'll set up a load balancer and
            allocate more gears to handle traffic as you need it.

          - else
            %span.text-warning= scale_reason

        = render :partial => 'application_types/application_type_notifications', :locals => { :type => @application_type }

  = f.buttons do
    = link_to "Back", application_types_path, :class => 'btn'
    = f.commit_button :button_html => { :disabled => @disabled }
    %span#gear_increase
      = gear_increase_indicator(@cartridges, @application.scales?, @application.gear_profile, false, @domain_capabilities, @is_domain_owner)
    = f.loading

- if @compact
  - content_for :javascripts do
    :javascript
      $(function() {
        $('.help-block').click(function() {
          $("#new_application.collapse-help").removeClass('collapse-help');
        });
      });

- content_for :javascripts do
  :javascript
    $(function() {
      var applicationTypeUrl = function(form) {
        var fields = form.serializeArray();

        // Remove special fields
        var removeFields = ['utf8', 'authenticity_token'];
        fields = $.grep(fields, function(field) {
          return removeFields.indexOf(field.name) == -1;
        });

        return "#{application_type_path(@application_type.id)}" + '?' + $.param(fields);
      };

      $('a[data-submit-domain]').click(function(){
        var thenUrl = applicationTypeUrl($(this).closest('form'));
        var url = "#{new_domain_path}" + '?domain_param=application[domain_name]&then=' + encodeURIComponent(thenUrl);
        window.location.href = url;
        return false;
      });

      var estimateUrl = function(form) {
        var fields = $.grep(form.serializeArray(), function(field) {
          return ['application[domain_name]', 'application[scale]', 'application[cartridges][]', 'application_type[cartridges][]', 'application[gear_profile]', 'unlock'].indexOf(field.name) != -1;
        });
        return "#{estimate_application_type_path(@application_type.id)}" + '?' + $.param(fields);
      }
      $('select#application_domain_name, #application_scale, #application_gear_profile').change(function() {
        $("form#new_application").validate().element('#application_gear_profile');
        $("#gear_increase").load(estimateUrl($(this).closest('form')));
      });

      $("form#new_application").validate().element('#application_gear_profile');
    });
    $(function() {
      $('input, textarea').placeholder();
    });

