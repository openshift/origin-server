- content_for :page_style, 'highlight'
- content_for :page_title, @application.name

- max_gears = @capabilities.max_gears

:css
  .restart .popover.bottom {margin-left: -75px;}
  .restart .popover.bottom .arrow {margin-left: 70px;}
  .restart .popover.bottom .arrow:before {border: 7px solid transparent; border-bottom-color: rgba(0,0,0,.2); content:''; height: 0; left: -7px; position: absolute; top: -7px; width: 0; z-index: -1;}

- content_for :top do
  .grid-wrapper.section-header.span12
    %nav.application.tile
      %h1.flow
        - if @application.aliases.present?
          .name= @application.name
          = link_to @application.aliases.first.name, URI::HTTP.new('http', nil, @application.aliases.first.name, nil, nil, nil, nil, nil, nil).to_s, :class => 'url url-alias'
          - if @application.aliases.length > 1
            = link_to "#{pluralize(@application.aliases.length - 1, 'other alias')}", application_aliases_path(@application), :class => 'url-alter'
          - else
            = link_to "change alias", application_aliases_path(@application), :class => 'url-alter'

        - else
          = link_to @application.web_url, :class => 'url-default' do
            %span.name>= @application.name
            %span.url>= URI.parse(@application.web_url).hostname.gsub(/\A#{Regexp.escape(@application.name)}/, '')
          = link_to "change", new_application_alias_path(@application), :class => 'url-alter'

        - types = @application.gear_ranges(max_gears).map{ |(profile, count, max)| "#{count} #{profile}" }
        - states = @gear_groups.map(&:states).flatten(1)
        - single_state = states.uniq.length == 1
        - all_started = single_state && states.first == :started
        - gear_title = "This application is using #{types.to_sentence} #{@application.gear_count > 1 ? 'gears' : 'gear'}.#{all_started ? '' : ' Some gears are not started - see the highlighted status items below.'}"

        .flow-block.right
          - if single_state
            %span.application-state{:class => all_started ? '' : 'text-warning'}= states.first.to_s.humanize
          - else
            %span.application-state.text-warning #{states.count{ |s| s == :started }} started /

          %span{:title => gear_title}
            %span.count= @application.gear_count
            %span.gear-icon{'aria-hidden'=>"true", 'data-icon' => "\ue014"}

          %span.restart.confirm-container
            = link_to application_restart_path(@application), { 'data-placement' => 'bottom', :class => 'font-icon-link confirm-link', :title => 'Restart Application'} do
              %span.font-icon{:alt => 'Restart', :title =>"Restart application", "aria-hidden" => "true", "data-icon" => "\ue020"}
            .confirm-popover.hide
              = render 'restarts/form'

      %p.created
        Created #{time_ago_in_words(@application.creation_time)} ago in domain
        #{link_to @application.domain_id, domain_path(@application.domain_id)}

.row

  %section#app-cartridges.span8
    %h2
      Cartridges
    -#= link_to application_cartridge_types_path(@application) do
      %span.header-btn-title add cartridge
      %span.font-icon{"aria-hidden" => "true", "data-icon" => "\uee16"}

    - can_scale_up = @application.cartridges.any?{ |c| c.can_scale_up?(max_gears) }
    - visual_limit = 6

    - @gear_groups.each_with_index do |group,g|
      .gear-group
        - group.cartridges.each_with_index do |cartridge, i|
          - primary = i == 0
          .cartridge-block{:class => ('cartridge-embedded' if !primary)}
            .cartridge-border
              .cartridge-inset
                - if primary
                  %h3.flow
                    .flow-block{:title => cartridge.name}
                      %span.font-icon{"aria-hidden" => "true", "data-icon" => "\ue021"}
                      = cartridge.display_name

                    .flow-block.right>
                      %ul.inline.left
                        - if cartridge.scales?
                          %li.top
                            %h4 Scales
                            %div.data
                              - from = cartridge.scales_from
                              - to = cartridge.effective_scales_to(max_gears)
                              = link_to application_scaling_path(@application, :anchor => cartridge.name) do
                                - if from == to
                                  Set to #{from}
                                - else
                                  #{cartridge.scales_from} - #{cartridge.effective_scales_to(max_gears)}

                        %li.top
                          %h4 Status
                          - states = group.states.group_by(&:to_s)
                          - if states.length == 1
                            %div.data{:class => (states.first[0] == 'started' ? '' : 'text-warning')}= states.first[0]
                          - else
                            - states.each do |status, at|
                              %div.data{:class => status == 'started' ? '' : 'text-warning'}= "#{at.length} #{status}"

                        %li.top
                          %h4 Gears
                          %div.data
                            = link_to cartridge_gear_group_count(group), application_scaling_path(@application, :anchor => cartridge.name), :title => gear_group_count_title(group.gears.length)

                        %li.top
                          %h4 Storage
                          %div.data
                            = link_to cartridge_storage(cartridge), application_storage_path(@application, :anchor => cartridge.name), :title => "Each gear is allocated disk space.  Click to change."

                - else
                  .flow
                    %h3.flow-block.cartridge-name{title: 'This cartridge is a plugin, and shares resources with the web framework'}
                      = cartridge.display_name
                    - if info = cartridge_info(cartridge, @application)
                      .flow-block.right= info

                - if cartridge.custom?
                  %p.created Created from #{link_to cartridge.url, cartridge.url}

                - if primary && (info = cartridge_info(cartridge, @application))
                  %p= info


    %section
      - carts = CartridgeType.cached.embedded.select{ |c| !@application.cartridges.include?(c) }.sort
      - databases = CartridgeType.suggest!(carts, :database?, 3).presence if @application.cartridges.none?(&:database?)
      - jenkins, builders = CartridgeType.suggest!(carts, :builder?).partition(&:jenkins_client?) unless @application.builds?
      - useful = CartridgeType.suggest_useful!(@application, carts).presence

      .row-fluid
        - if databases
          .span5
            %h3 Databases
            %ul.unstyled
              - databases.each do |c|
                %li
                  %span{:'data-icon' => "\uee49"}
                  = link_to "Add #{c.display_name}", application_cartridge_type_path(@application, c, :direct => true)
        - if jenkins.present? or builders.present?
          .span5
            %h3 Continuous Integration
            %ul.unstyled
              - if jenkins.present?
                %li
                  %span{:'data-icon' => "\ue023"}
                  = link_to "Enable Jenkins", application_building_path(@application)
              - builders.each do |c|
                %li
                  %span{:'data-icon' => "\ue023"}
                  = link_to "Add #{c.display_name}", application_cartridge_type_path(@application, c, :direct => true)

        - if useful
          .span4
            %h3 Tools and Support
            %ul.unstyled
              - useful.each do |c|
                %li
                  %span{:'data-icon' => "\ue021"}
                  = link_to "Add #{c.display_name}", application_cartridge_type_path(@application, c, :direct => true)

      - if databases or jenkins.present? or builders.present? or useful
        %p= link_to "Or, see the entire list of cartridges you can add", application_cartridge_types_path(@application)
      - else
        %p= link_to "Show other cartridges you can add to this application", application_cartridge_types_path(@application)

  %div.sidebar.span4
    #source-code
    - if @has_keys
      %h2 Source Code
      %input#application_git_url.git-url{:readonly => 'readonly', :'data-text-copy' => true, :value => @application.git_url, :title => 'The code for your application will be available through this Git repository.', :style => 'with: 100%; width: -moz-available;'}
      %p.small
        Pass this URL to 'git clone' to copy the repository locally.

      %h2 Remote Access
      %ul.unstyled
        %li= link_to 'Want to log in to your application?', '#', :'data-unhide' => '.ssh.hidden'
        %li.ssh.hidden
          %p
            The command below will open a Secure Shell (SSH) session to your application on most operating systems.  See our #{link_to 'SSH help page', ssh_help_url} for information about connecting with Windows, Mac, and Linux computers.
          %p
            %input#application_ssh_url.git-url{:readonly => 'readonly', :'data-text-copy' => true, :value => "ssh #{@application.ssh_string}", :title => 'Cut and paste this command into a command shell to access your OpenShift application.'}

    - else
      %h2 Source Code
      %p.small
        You must #{link_to "add an SSH public key to your account", new_key_path}
        before you can upload code or remotely access your application.

      %h2 Remote Access
      %p.small
        Requires a public key.

    - members = @application.members
    - if members.size > 1
      %h2
        Members from domain
        #{link_to @application.domain_id, domain_path(@application.domain_id)}
      %table.table.table-condensed
        - if me = members.find(&:me)
          %tr
            %td.member{:title => me.name}
              = me.name
            %td 
              = me.owner? ? "Owner" : Role.description_for(me.role)    

        - members.reject(&:me).sort.each do |member|
          %tr
            %td.nowrap.member{:title => member.name}
              = member.name
            %td
              = member.owner? ? "Owner" : Role.description_for(member.role)

    .btn-toolbar
      = link_to 'Delete this application', delete_application_path(@application), :class => 'btn btn-small'

- content_for :javascripts do
  :javascript
    $('[data-text-copy]').click(function() {
      $(this).focus().select();
      $(this).keypress(function(e){ e.preventDefault(); });
    });
