- breadcrumb_for_application @application, 'Change Gear Storage'
- content_for :page_title, 'Change Gear Storage'

-# This will only render if we have this partial, like in Online or if an admin wants to provide information
- flash.now[:info] = render('increase_storage') unless @can_modify_storage

%h1 Change Gear Storage

%section#storage-gear-groups
  %section
    %p
      Gear storage space is used for code, logs, cache, config files, and databases.
      %strong Gear storage is only accessible to the gear it's associated with, and isn't able to be shared between gears.
      User files should be kept in shared storage.

    %p
      If you are decreasing your storage, make sure to check your usage to ensure you will still have sufficient disk space.

  %section
    %h3 Check Your Usage
    %p
      You can check your usage by SSH-ing into your app and running the quota command.

      %pre.cli
        = preserve do
          :escaped
            $ ssh #{@application.ssh_string}
            > quota

  - @gear_groups.each_with_index do |group,g|
    :ruby
      cartridge = group.cartridges.first
      other_carts = group.cartridges - [cartridge]
    .gear-group.tile
      %h2
        = cartridge.display_name
        %span.pull-right= scaled_cartridge_storage(cartridge)

      = semantic_form_for cartridge,
                          :simple => true,
                          :method => :put,
                          :url => application_storage_cartridge_path(@application.id, cartridge.name) do |f|

        = f.semantic_errors :additional_gear_storage

        %p
          Each gear this cartridge is deployed to has #{cartridge.base_gear_storage}GB of included storage.

        - if cartridge.scales?
          %p
            This cartridge is scalable.
            The additional storage will apply to each extra gear.

        - unless other_carts.empty?
          %p This storage will also be shared by:
          %ul
            - other_carts.each do |cart|
              %li= cart.display_name

        = f.inputs :inline => true, :without_errors => true do
          .input-prepend
            %span.add-on Additional Storage Per Gear
            :ruby
              default_html = {
                :style => 'width: auto',
                :title => 'Additional Storage',
                :disabled => !@can_modify_storage
              }
            = f.input :additional_gear_storage, storage_options(0,@max_storage).merge({:input_html => default_html})

          = f.commit_button :label => 'Save', :button_html => {:class => 'btn btn-small'}
          = f.loading

  %p
    For more information about storage for your application see
    #{link_to 'our FAQ on storage', storage_help_url}.

- content_for :javascripts do
  :javascript
    jQuery('#storage-gear-groups FORM :input').change(function() {
      jQuery(this).closest('form').find('INPUT.btn').addClass('btn-primary');
    });
