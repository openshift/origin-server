// Allow a span to be implicitly wrapped to set grid backgrounds, while allowing 
// a responsive stylesheet to know about the wrapper.
.grid-wrapper {
  margin-left: 0; // overrides the corresponding style from 'span'
  float: left;
}

// Allow a row to have an right gutter equal to a left gutter 
.row-flush-right { 
  margin-right: -$gridGutterWidth;

  .span-flush-right { 
    padding-right: $gridGutterWidth;
  }
}

// For use in inlined elements in combination with existing padding
.gutter { 
  margin-left: $gridGutterWidth;
}
.gutter-right {
  margin-right: $gridGutterWidth/2;
}

// Use to set generic bottom margin between elements
.gutter-bottom, .column-content section, .row-content  {
  margin-bottom: $gridGutterWidth;
}

// Put content into a box with gutters compatible with the grid
.box-content {
  padding: 20px $gridGutterWidth;
}

// Allow pull-right to take precedence over a span
.pull-right[class*="span"] {
  float: right;
}

// Row of blocks that can vary in height, use with row-fluid
// ----------

.row-fluid.row-block {
  margin-left: 0;
  list-style: none;
}
.row-fluid.row-block > li {
  &.span6:nth-child(2n + 1),
  &.span4:nth-child(3n + 1),
  &.span3:nth-child(4n + 1),
  &.span2:nth-child(6n + 1) {
    clear: left;
    margin-left: 0;
  }
}

// Custom grid equivalent for flow
.flow {
  display: table;
  width: 100%;
  //table-layout: fixed;

  > .flow-block {
    display: table-cell;
    vertical-align: middle;

    > ul.inline {
      display: inline-block;
      white-space: nowrap;
      margin-bottom: 0;

      > li {
        font-size: $tinyFontSize;

        > div {
          margin-top: 2px;
          white-space: normal;
        }
      }
    }
  }
}

@media (max-width: 767px) {
  .flow > .flow-block {
    display: inline-block;

    &.right {
      float: right;
    }
  }
}