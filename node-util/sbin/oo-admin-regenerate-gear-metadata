#!/usr/bin/env oo-ruby
#--
# Copyright 2014 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#++

require 'etc'
require 'optparse'
require 'openshift-origin-node'
require 'openshift-origin-common'
require 'openshift-origin-node/utils/shell_exec'
require 'openshift-origin-node/utils/cgroups/libcgroup'



module OpenShift
  module Runtime
    class GearMetadataRegenerator
      CGRULES_CONF = '/etc/cgrules.conf'
      CGCONFIG_CONF = '/etc/cgconfig.conf'
      LIMITS_D_DIR = '/etc/security/limits.d'

      attr_accessor :path, :uuid, :uid, :limits_d_file, :config

      def self.get_all_gear_info()
        retval = []
        config = OpenShift::Config.new
        gear_base_dir = config.get('GEAR_BASE_DIR')
        do_fail("GEAR_BASE_DIR does not exist or is not a directory: #{gear_base_dir}") unless File.exists?(gear_base_dir)
        Dir.glob("#{gear_base_dir}/*") do |gear_path|
          next unless File.directory?(gear_path)

          # Grab the gear uuid out of the path
          gear_path.match(/\/([\d\w]{24,32})$/)
          gear_uuid = $1
          next if gear_uuid.nil?

          s = File.stat(gear_path)
          gear_uid = s.gid

          retval << GearMetadataRegenerator.new(gear_path, gear_uuid, gear_uid)
        end

        return retval
      end

      def initialize(path, uuid, uid)
        @path = path
        @uuid = uuid
        @uid = uid
        @limits_d_file = "#{LIMITS_D_DIR}/84-#{@uuid}.conf"
        @config = OpenShift::Config.new
      end

      def passwd_entry_exist?()
        return Etc.getpwnam(@uuid).nil? == false
      rescue ArgumentError => ex
        return false
      end

      def group_entry_exist?()
        return Etc.getgrnam(@uuid).nil? == false
      rescue ArgumentError => ex
        return false
      end

      def groupadd_gear_entry()
        cmd = %{groupadd -g #{@uid} #{@uuid}}
        out,err,rc = ::OpenShift::Runtime::Utils::oo_spawn(cmd)
        raise %Q[ERROR: unable to create user group(#{rc}): #{cmd.squeeze(" ")} ] + \
              %Q[stdout: #{out} stderr: #{err}] unless rc == 0
      end

      def useradd_gear_entry()
        gear_gecos = config.get('GEAR_GECOS')
        do_fail('GEAR_GECOS isn\'t set in config') if gear_gecos.nil?

        gear_shell = config.get('GEAR_SHELL')
        do_fail('GEAR_SHELL isn\'t set in config') if gear_shell.nil?

        # DISABLE_PASSWORD_AGING should be true, by default.
        disable_password_aging = true unless @config.get('DISABLE_PASSWORD_AGING') == "false" 
        if disable_password_aging 
          cmd = "/usr/sbin/useradd --uid #{@uid} --gid #{@uid} --comment '#{gear_gecos}' --no-create-home --home #{@path} --shell #{gear_shell} #{@uuid} --key PASS_MAX_DAYS=-1 --key PASS_MIN_DAYS=-1 --key PASS_WARN_AGE=-1"
        else
          cmd = "/usr/sbin/useradd --uid #{@uid} --gid #{@uid} --comment '#{gear_gecos}' --no-create-home --home #{@path} --shell #{gear_shell} #{@uuid}"
        end

        out,err,rc = ::OpenShift::Runtime::Utils::oo_spawn(cmd)
        raise %Q[ERROR: unable to create user user account(#{rc}): #{cmd.squeeze(" ")} ] + \
              %Q[stdout: #{out} stderr: #{err}] unless rc == 0
      end

      def cgrules_conf_entry_exist?()
        return exists_in_file?(CGRULES_CONF, /#{@uuid}/)
      end

      def cgconfig_conf_entry_exist?()
        return exists_in_file?(CGCONFIG_CONF, /#{@uuid}/)
      end

      def fix_cgroups()
        # Don't try to add gears that already have entries
        return if cgconfig_conf_entry_exist? && cgrules_conf_entry_exist?

        OpenShift::Runtime::Utils::Cgroups.new(@uuid).create
      end

      def limits_d_file_exists?()
        return File.exists?(@limits_d_file)
      end

      def add_limits_d_file()
        # Don't add the file if one exists
        return if limits_d_file_exists?

        add_line_to_file(@limits_d_file, "# PAM process limits for guest #{@uuid}")
        add_line_to_file(@limits_d_file, "# see limits.conf(5) for details")
        add_line_to_file(@limits_d_file, "#Each line describes a limit for a user in the form:")
        add_line_to_file(@limits_d_file, "#")
        add_line_to_file(@limits_d_file, "#<domain>        <type>  <item>  <value>")
        add_line_to_file(@limits_d_file, "#{@uuid}\tsoft\tnproc\t250")
      end

      private
      def exists_in_file?(file, regex)
        return File.read(file).match(regex).nil? == false
      end

      def add_line_to_file(file, line)
        File.open(file, 'a') do |f|
          f.puts(line)
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdout.sync = true
  $stderr.sync = true

  opt_assume_yes = false
  opt_verbose = true
  opt_run_accept_node = true

  optparse = OptionParser.new do |opts|
    opts.banner = "\nThe purpose of this script is to regenerate missing gear metadata.\n" +
                  "\nUsage: #{$0}\n"

    opts.on('-y', '--assumeyes', 'Answer yes for all questions') { opt_assume_yes = true }
    opts.on('-q', '--quiet', 'Quiet operation') { opt_verbose = false }
    opts.on('--no-accept-node', 'Don\'t run accept node') { opt_run_accept_node = false }
  end
  optparse.parse!

  vputs = lambda { |msg| puts msg if opt_verbose }
  vprint = lambda { |msg| print msg if opt_verbose }


  unless opt_assume_yes
    puts
    puts "This script attempts to regenerate gear entries for:"
    puts "  *  /etc/passwd"
    puts "  *  /etc/shadow"
    puts "  *  /etc/group"
    puts "  *  /etc/cgrules.conf"
    puts "  *  /etc/cgconfig.conf"
    puts "  *  /etc/security/limits.d"
    puts
    print "Proceed? [yes/NO]: "
    ans = gets().strip
    puts

    abort "Exiting on user request" unless ans.upcase == "YES"
  end

  failures = 0
  OpenShift::Runtime::GearMetadataRegenerator.get_all_gear_info.each do |gear|
    vprint.call "Checking for group entry for #{gear.uuid}... "
    if gear.group_entry_exist?
      vputs.call "found, skipping."
    else
      vprint.call "absent, fixing... "

      out, err, rc = nil
      begin
        out, err, rc = gear.groupadd_gear_entry()
        vputs.call "Done."
      rescue Exception => ex
        failures += 1
        $stderr.puts "FAILED passwd: #{ex.message}"
      end
    end

    vprint.call "Checking for passwd entry for #{gear.uuid}... "
    if gear.passwd_entry_exist?
      vputs.call "found, skipping."
    else
      vprint.call "absent, fixing... "

      out, err, rc = nil
      begin
        out, err, rc = gear.useradd_gear_entry()
        vputs.call "Done."
      rescue Exception => ex
        failures += 1
        $stderr.puts "FAILED passwd: #{ex.message}"
      end
    end

    vprint.call "Checking for cgconfig.conf and cgrules.conf entries for #{gear.uuid}... "
    if gear.cgconfig_conf_entry_exist? && gear.cgrules_conf_entry_exist?
      vputs.call "found, skipping."
    else
      vprint.call "absent, fixing... "

      begin
        gear.fix_cgroups()
        vputs.call "Done."
      rescue Exception => ex
        failures += 1
        $stderr.puts "FAILED cgroups: #{ex.message}"
      end
    end

    vprint.call "Checking for limits.d file for #{gear.uuid}... "
    if gear.limits_d_file_exists?
      vputs.call "found, skipping."
    else
      vprint.call "absent, fixing... "
      gear.add_limits_d_file()
      vputs.call "Done."
    end

    vputs.call ""
  end

  if opt_run_accept_node
    vputs.call "Running oo-accept-node to check node consistency..."

    cmd = '/usr/sbin/oo-accept-node'
    cmd += ' -v' if opt_verbose
    cmd += ' > /dev/null' unless opt_verbose
    out, err, rc = OpenShift::Runtime::Utils.oo_spawn(cmd)

    vputs.call out
    if rc != 0
      $stderr.puts err
      failures += 1
    end
  end

  if failures > 0
    $stderr.puts "\nError: some problems weren't able to be fixed.\n\n"
    exit 5
  end
end
