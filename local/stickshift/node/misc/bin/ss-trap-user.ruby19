#!/usr/bin/ruby

require 'rubygems'
require 'syslog'
require 'stickshift-node'
require 'base64'

commands_map = {
    "git-receive-pack"  => "/usr/bin/git-receive-pack",
    "git-upload-pack"   => "/usr/bin/git-upload-pack",
    "snapshot"          => "/bin/bash",
    "restore"           => "/bin/bash",
    "tail"              => "/usr/bin/tail",
    "sssh"             => "/bin/bash",
    "true"              => "/bin/true",
    "java"              => "/bin/bash",
    "scp"               => "/bin/bash",
    "cd"                => "/bin/bash",
    "set"               => "/bin/bash",
    "mkdir"             => "/bin/bash",
    "test"              => "/bin/bash",
    "rsync"             => "/bin/bash",
    "ctl_all"           => "/bin/bash",
    "deploy.sh"         => "/bin/bash",
    "rhc-list-ports"    => "/bin/bash",
    "post_deploy.sh"    => "/bin/bash"
}

def load_env
  env = {}
  # Load environment variables into a hash
  Dir["~/.env/*"].each { |f|
    contents = nil
    File.open(f) {|input|
      contents = input.read.chomp
      index = contents.index('=')
      contents = contents[(index + 1)..-1]
      contents = contents[/'(.*)'/, 1] if contents.start_with?("'")
      contents = contents[/"(.*)"/, 1] if contents.start_with?('"')
    }
    env[File.basename(f).intern] =  contents
  }
  env
end

def syslog(message)
  Syslog.open($0, Syslog::LOG_PID | Syslog::LOG_CONS) { |s| s.notice message }
end

env = load_env
orig_cmd = ENV['SSH_ORIGINAL_COMMAND'] || "sssh"
syslog(orig_cmd)
config = StickShift::Config.instance

allargs = orig_cmd.split(' ')
basecmd = allargs[0]
cmd = commands_map[basecmd]
if cmd.nil?
  syslog("Invalid command #{orig_cmd}")
  $stderr.puts("Invalid command #{orig_cmd}")
  exit(2)
end

case basecmd
when "snapshot"       # This gets called with "snapshot"
  allargs = ['snapshot.sh'] 
  
when "restore"        # This gets called with "restore <INCLUDE_GIT>"
  include_git = false
  if allargs.length > 1 and allargs[1] == 'INCLUDE_GIT'
    include_git = true
  end
  allargs = ['restore.sh'] 
  allargs.push('INCLUDE_GIT') if include_git
  
when "sssh"
  env["PS1"] = "sssh> "
  if allargs.length < 2
    allargs = ['--init-file', '/usr/bin/sssh', '-i']
  else
    str = allargs[1..-1].join(' ')
    allargs = ['--init-file', '/usr/bin/sssh', '-c', str]
  end

when 'ctl_all'
  allargs = ['-c', ". /usr/bin/sssh > /dev/null ; ctl_all #{allargs[-1]}"]

when 'java','set','scp', 'cd', 'test', 'mkdir', 'rsync', 'deploy.sh', 'post_deploy.sh', 'rhc-list-ports'
  str = allargs.join(' ')
  allargs = ['-c', str]

when 'tail'
  files = []
      
  files_start_index = 1
  args = []
  add_follow = true
  
  if allargs[1] == '--opts'
    files_start_index = 3
    args_str = Base64.decode64(allargs[2])
    args = args_str.split()
    args.each do |arg|
      if arg.start_with?('..') || arg.starts_with?('/')
        print "All paths must be relative: " + arg
        exit(88)
      elsif arg == '-f' or arg == '-F' or arg.start_with?('--follow')
        add_follow = false
      end
    end
  end

  allargs[files_start_index..-1].each do |glob_list|
    Dir.glob(glob_list).each do |f|
      begin
        if !f[".."].nil? or f.start_with?("/")
          print "invalid character"
          exit 91
        elsif File.symlink?(f)
          print "links not supported"
          exit 94
        elsif File.stat(f).st_uid != Process::UID.eid
          print "not your file"
          exit 87
        else
          files.push(f)
        end
      rescue SystemExit
        raise
      rescue Exception => e
        print "Error #{e.message}"
        exit 91
      end
    end
  end
  
  if files.length == 0
    print "Could not files any files matching glob"
    exit 32
  end
  
  allargs = []
  allargs += args
  allargs.push('-f') if add_follow
  allargs += files
when 'git-receive-pack', 'git-upload-pack'
  thearg = allargs[1..-1].join(' ')
  if thearg[0] == "'" and thearg[-1] == "'"
    thearg.gsub!("'","")
    thearg.gsub!("\\'","")
    thearg.gsub!("//","/")    

    # replace leading tilde (~) with user's home path
    realpath = File.absolute_path(thearg)
    unless realpath.start_with?(config.get('GEAR_BASE_DIR'))
      syslog("Invalid repository: not in GEAR_BASE_DIR - #{thearg}: (#{realpath})")
      print "Invalid repository #{thearg}: not in gear dir"
      exit 3
    end
    
    unless File.directory?(realpath)
      syslog("Invalid repository #{thearg} (#{realpath})")
      print "Invalid repository #{thearg}: not a directory"
      exit(3)
    end
    allargs = [thearg]
  end
end

Kernel.exec(env, cmd, [cmd] + allargs)
exit 1
