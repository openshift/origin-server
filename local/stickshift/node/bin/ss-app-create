#!/usr/bin/env ruby
#--
# Copyright 2010 Red Hat, Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#++

def usage
    puts <<USAGE
== Synopsis

ss-app-create: Creates a new application container. 
  This command must be run as root.

== Usage

ss-app-create --with-app-uuid APP_UUID --with-container-uuid UUID --with-namespace NAMESPACE [--named NAME] [--with-uid UID] [--with-quota-blocks QUOTA_BLOCKS] [--with-quota-files QUOTA_FILES]

Options:
-h|--help:
   Prints this message

APP_UUID: Unique identifier for the application
UUID: Unique identifier for the container
NAME: The name of the application to create
NAMESPACE: The namespace of the application to create

USAGE
end

require 'stickshift-node'
opts = GetoptLong.new(
    ["--with-app-uuid",       "-a", GetoptLong::REQUIRED_ARGUMENT],
    ["--with-container-uuid", "-c", GetoptLong::REQUIRED_ARGUMENT],
    ["--with-uid",            "-i", GetoptLong::REQUIRED_ARGUMENT],
    ["--with-namespace",            GetoptLong::REQUIRED_ARGUMENT],
    ["--with-quota-blocks",         GetoptLong::REQUIRED_ARGUMENT],
    ["--with-quota-files",          GetoptLong::REQUIRED_ARGUMENT],
    ["--dry-run",             "-n", GetoptLong::NO_ARGUMENT],
    ["--named",                     GetoptLong::OPTIONAL_ARGUMENT],
    ["--porcelain",           "-q", GetoptLong::NO_ARGUMENT],
    ["--debug",               "-d", GetoptLong::NO_ARGUMENT],
    ["--help",                "-?", GetoptLong::NO_ARGUMENT]
)

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

if args["--help"]
  usage
  exit -1
end

app_uuid = args['--with-app-uuid']
uuid = args['--with-container-uuid']
uid = args['--with-uid']
uid = nil if uid && uid.empty?
quota_blocks = args['--with-quota-blocks']
quota_files = args['--with-quota-files']
name = args['--named']
namespace = args['--with-namespace']
$dry_run = true if args['--dry-run']
$ss_debug = true if args['--debug']
$porcelin = args['--porcelain'] ? true : false

unless uuid
  usage
  exit -100
end

begin
  container = StickShift::ApplicationContainer.new(uuid, uuid, uid, name, namespace, quota_blocks, quota_files)
  container.create
rescue StickShift::UserCreationException => e
  $stderr.puts(e.message)
  exit 129
rescue Exception => e
  $stderr.puts(e.message)
  exit -1
else
  exit 0
end