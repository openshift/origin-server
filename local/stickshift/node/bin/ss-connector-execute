#!/usr/bin/env ruby
#--
# Copyright 2010 Red Hat, Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#++

def usage
    puts <<USAGE
== Synopsis

ss-connector-execute: Executes a connector on a cartridge component
  This command must be run as root.

== Usage

ss-connector-execute GEAR_UUID CART_NAME HOOK_NAME <args-to-connector>

Options:
-h|--help:
   Prints this message

GEAR_UUID: Unique identifier for gear that the component is running on
CART_NAME: Unique identifier for the cartridge that the component belongs to
HOOK_NAME: Name of the connector to be executed

USAGE
end

require 'rubygems'
require 'stickshift-node'
require 'open4'
require 'shellwords'
opts = GetoptLong.new(
    ["--gear-uuid",       "-g", GetoptLong::REQUIRED_ARGUMENT],
    ["--cart-name",       "-c", GetoptLong::REQUIRED_ARGUMENT],
    ["--hook-name",       "-h", GetoptLong::REQUIRED_ARGUMENT],
    ["--porcelain",           "-q", GetoptLong::NO_ARGUMENT],
    ["--debug",               "-d", GetoptLong::NO_ARGUMENT],
    ["--help",                "-?", GetoptLong::NO_ARGUMENT]
)

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

if args["--help"]
  usage
  exit -1
end

gear_uuid = args['--gear-uuid']
cart_name = args['--cart-name']
hook_name = args['--hook-name']
$ss_debug = true if args['--debug']
$porcelin = args['--porcelain'] ? true : false

config = StickShift::Config.instance
unless gear_uuid
  usage
  exit -100
end

begin
  cart_dir = config.get("CARTRIDGE_BASE_PATH")
  if File.exists? "#{cart_dir}/#{cart_name}/info/connection-hooks/#{hook_name}"                
     shellsafe_argv = ARGV.map { |arg| Shellwords::shellescape(arg) }
     # pid, stdin, stdout, stderr = Open4::popen4ext(true, "runuser --shell /bin/sh #{gear_uuid} /usr/libexec/stickshift/cartridges/#{cart_name}/info/connection-hooks/#{hook_name} #{shellsafe_argv.join(' ')} 2>&1")
     pid, stdin, stdout, stderr = Open4::popen4ext(true, "#{cart_dir}/#{cart_name}/info/connection-hooks/#{hook_name} #{shellsafe_argv.join(' ')} 2>&1")
     zout = stdout.gets
     zout = "" if zout.nil?
     $stdout.puts zout
  end
rescue Exception => e
  $stderr.puts(e.message)
  exit -1
else
  exit 0
end
