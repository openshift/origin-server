#!/bin/bash

# Creates a haproxy instance
CART_NAME="haproxy"
CART_VERSION="1.4"

# Exit on any errors
set -e

function print_help {
    echo "Usage: $0 app-name namespace uuid"

    echo "$0 $@" | logger -p local0.notice -t stickshift_haproxy_configure
    exit 1
}

function generate_ssh_keys {
    /bin/mkdir -p $HAPROXY_DIR/.ssh/
    /bin/rm -f $HAPROXY_DIR/.ssh/haproxy_id_rsa $HAPROXY_DIR/.ssh/haproxy_id_rsa.pub
    /usr/bin/ssh-keygen -N '' -f $HAPROXY_DIR/.ssh/haproxy_id_rsa > /dev/null

    touch "$HAPROXY_DIR/.ssh/known_hosts"
    touch "$HAPROXY_DIR/.ssh/config"
    /bin/chown root.$uuid -R "$HAPROXY_DIR/.ssh/"
    chmod 0750 "$HAPROXY_DIR/.ssh/"
    chmod 0640 "$HAPROXY_DIR/.ssh/haproxy_id_rsa" "$HAPROXY_DIR/.ssh/haproxy_id_rsa.pub"
    chmod 0660 "$HAPROXY_DIR/.ssh/config" "$HAPROXY_DIR/.ssh/known_hosts"
    observe_setup_var_lib_dir "$HAPROXY_DIR/.ssh/"
}

function setup_haproxy_as_a_service() {
    [ $# -eq 4 -o $# -eq 3 ] || print_help

    setup_configure "$1" $2 $3 $4
    check_app_dir_doesnt_exist
    unobfuscate_app_home $uuid $namespace $application

    # Source the original application name if any.
    source_if_exists "$APP_HOME/.env/OPENSHIFT_APP_NAME"

    # Repo
    if [ ! -d $git_url ]; then
        clone_external_git_repo $application $user_id $group_id $uuid $git_url
    else
        clone_git_repo $application $user_id $group_id $uuid "haproxy 1.4"
    fi

    #
    # Create the core of the application
    #
    mkdir -p "$APP_DIR"
    pushd "$APP_DIR" > /dev/null
    create_standard_app_dirs
    mkdir -p conf conf.d logs sessions
    ln -s /usr/lib64/httpd/modules modules
    ln -s /etc/httpd/conf/magic conf/magic
    popd > /dev/null

    #
    # Find an open localhost IP
    #
    IP=`find_open_ip $uid $uuid`

    create_app_ctl_script
    populate_repo_dir
    secure_app_dir
    secure_conf_dirs
    observe_setup_app_and_git_dirs

    #
    # Create environment variables
    #
    create_standard_env_vars
    create_standard_network_env_vars
    create_standard_repo_dir_env_var
    create_standard_path_env_var

    export IP2=`embedded_find_open_ip $uid "$APP_HOME/"`
    echo "export OPENSHIFT_HAPROXY_STATUS_IP='$IP'" > "$APP_HOME/.env/OPENSHIFT_HAPROXY_STATUS_IP"
    $CART_INFO_DIR/bin/deploy_httpd_config.sh $application $uuid $IP
    mkdir $APP_HOME/.openshift
    chown ${uuid} $APP_HOME/.openshift

    #
    # Start the server
    #
    start_app

    #
    # Create virtualhost definition for apache
    #
    $CART_INFO_DIR/bin/deploy_httpd_proxy.sh $application $namespace $uuid $IP

    restart_httpd_graceful
}


while getopts 'd' OPTION
do
    case $OPTION in
        d) set -x
        ;;
        ?) print_help
        ;;
    esac
done


[ $# -eq 4 -o $# -eq 3 ] || print_help

source /etc/stickshift/stickshift-node.conf
source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/util

app_type="$CART_NAME-$CART_VERSION"

if [ -z "$(get_app_type $3)" ]; then
    #  This gear is dedicated to running haproxy - configure it as such.
    setup_haproxy_as_a_service "$@"
fi

setup_embedded_configure "$1" $2 $3

stop_app

CART_INFO_DIR=${CARTRIDGE_BASE_PATH}/embedded/haproxy-1.4/info

export HAPROXY_DIR="$APP_HOME/$CART_NAME-$CART_VERSION"


#
# Generate key pair
#
generate_ssh_keys

public_key=$(cat $HAPROXY_DIR/.ssh/haproxy_id_rsa.pub | awk '{print $2}')
add_ssh_key $public_key

add_broker_auth_key

#
# Create the core of the application
#
mkdir -p "$HAPROXY_DIR"
pushd "$HAPROXY_DIR" > /dev/null
mkdir -p conf conf.d logs run sessions
ln -s /usr/lib64/httpd/modules modules
ln -s /etc/httpd/conf/magic conf/magic
touch conf/gear-registry.db
popd > /dev/null

#
# Find an open localhost IP
#
source $APP_HOME/.env/OPENSHIFT_INTERNAL_IP
IP=$OPENSHIFT_INTERNAL_IP
unset OPENSHIFT_INTERNAL_IP

export IP2=`embedded_find_open_ip $uid "$APP_HOME"`
echo "export OPENSHIFT_HAPROXY_STATUS_IP='$IP'" > "$APP_HOME/.env/OPENSHIFT_HAPROXY_STATUS_IP"
$CART_INFO_DIR/bin/deploy_httpd_config.sh $application $uuid $IP
mkdir -p $APP_HOME/.openshift
chown ${uuid} $APP_HOME/.openshift $HAPROXY_DIR/run/ $HAPROXY_DIR/logs/ $HAPROXY_DIR/sessions $HAPROXY_DIR/conf/gear-registry.db
observe_setup_var_lib_dir "$HAPROXY_DIR"

# Alter PATH so that the haproxy app_ctl.sh script is called.
sed -i "s#export \s*PATH=#export PATH=$CART_INFO_DIR/bin/:#" $APP_HOME/.env/PATH

#
# Start the server
#
start_app

#
# Create virtualhost definition for apache
#
$CART_INFO_DIR/bin/deploy_httpd_proxy.sh $application $namespace $uuid $IP

#  Check if its a scalable app and if so need to do deploy an additional
#  virtualhost definition for the actual app.
source "$APP_HOME/.env/OPENSHIFT_APP_NAME"
if [ "$application" != "$OPENSHIFT_APP_NAME" ]; then
   $CART_INFO_DIR/bin/deploy_httpd_proxy.sh $OPENSHIFT_APP_NAME $namespace $uuid $IP
fi

restart_httpd_graceful
