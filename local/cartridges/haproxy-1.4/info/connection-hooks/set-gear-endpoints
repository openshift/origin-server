#!/bin/bash

# Set ssh endpoints for all gears where the application framework is running.
CART_NAME=haproxy
CART_VERSION=1.4

# Exit on any errors
set -e

function log_error() {
    echo "$0: $@" | logger -p local0.err -t stickshift_haproxy_set_git_url
    return ${1:-1}
}


function print_help() {
    echo "Usage: $0 app-name namespace uuid"
    echo "Start a running application"

    echo "$0 $@" | logger -p local0.notice -t stickshift_haproxy_set_git_url
    exit 1
}


function get_registered_endpoints() {
    [ -f "$HAPROXY_GEAR_REGISTRY" ]  &&  cat "$HAPROXY_GEAR_REGISTRY"
}


function register_gear_endpoint() {
    [ $# -lt 2 ]  &&  return 1

    #  Add gear endpoint to registry if it doesn't already exist.
    if ! grep "$1" "$HAPROXY_GEAR_REGISTRY" > /dev/null 2>&1; then
        echo "$2" >> "$HAPROXY_GEAR_REGISTRY"
        if [ -f "$FRAMEWORK_INFO_DIR/bin/sync_gears.sh" ]; then
            run_as_user "$FRAMEWORK_INFO_DIR/bin/sync_gears.sh $1"
        fi
    fi

    return 0
}


function unregister_gear_endpoint() {
    [ $# -lt 1 ]  &&  return 1

    #  Check if the gear endpoint registry entry exists.
    if grep "$1" "$HAPROXY_GEAR_REGISTRY" > /dev/null 2>&1; then
        sed -i "/$1.*/d" "$HAPROXY_GEAR_REGISTRY"
    fi
}


#
# main():
#
while getopts 'd' OPTION
do
    case $OPTION in
        d) set -x
        ;;
        ?) print_help
        ;;
    esac
done


[ $# -gt 3 ] || print_help

source /etc/stickshift/stickshift-node.conf
source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/util

setup_configure "$1" $2 $3

import_env_vars

# Defines.
HAPROXY_CONF_DIR=$APP_HOME/$CART_NAME-$CART_VERSION/conf
HAPROXY_GEAR_REGISTRY=$HAPROXY_CONF_DIR/gear-registry.db
FRAMEWORK_INFO_DIR=${CARTRIDGE_BASE_PATH}/$OPENSHIFT_GEAR_TYPE/info

# Array containing current endpoints.
declare -A curr_endpoints

#  Remove the first 3 args and process all the remaining args of the form
#  key=value. The values contain 'scp-like' endpoints + dns name for each gear.
kvargs=$(echo "${@:4}" | tr -d "\n" )
for arg in $kvargs; do
    zinfo=$(echo "$arg" | cut -f 2 -d '=' | tr -d "'")
    zarr=(${zinfo//;/ })
    ep=${zarr[0]}
    curr_endpoints[$ep]="$zinfo"
    register_gear_endpoint "$ep" "$zinfo"  ||  :
done

# Get a list of all the registered endpoints and remove the endpoints which
# are not in the current set.
for zinfo in $(get_registered_endpoints); do
    zarr=(${zinfo//;/ })
    ep=${zarr[0]}
    if [ -z "${curr_endpoints[$ep]}" ]; then
        unregister_gear_endpoint "$ep" "$zinfo"  ||  :
    fi
done

uuid=$3
setup_user_vars
run_as_user "app_ctl.sh reload"
